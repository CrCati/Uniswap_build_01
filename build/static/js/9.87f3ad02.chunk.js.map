{"version":3,"sources":["nft/components/layout/Checkbox.tsx","nft/components/layout/Input.tsx","nft/components/collection/CollectionNfts.css.ts","nft/components/layout/Checkbox.css.ts","nft/components/collection/FilterButton.tsx","nft/components/collection/FilterButton.css.ts","nft/components/collection/shared.tsx","../node_modules/react-feather/dist/icons/link.js","../node_modules/react-feather/dist/icons/twitter.js","nft/components/profile/list/shared.tsx","nft/components/profile/list/Modal/BelowFloorWarningModal.tsx","nft/components/profile/list/utils.ts","nft/components/profile/list/Modal/ListModalSection.tsx","nft/components/profile/list/ListingButton.tsx","nft/components/profile/list/Modal/ContentRow.tsx","nft/components/profile/list/SetDurationModal.tsx","nft/components/profile/list/Modal/SuccessScreen.tsx","nft/components/profile/list/Modal/ListModal.tsx","nft/components/profile/list/Dropdown.tsx","nft/components/profile/list/PriceTextInput.tsx","nft/components/profile/list/RoyaltyTooltip.tsx","nft/components/profile/list/MarketplaceRow.tsx","nft/components/profile/list/NFTListRow.tsx","nft/components/profile/list/NFTListingsGrid.tsx","nft/components/profile/list/SelectMarketplacesDropdown.tsx","nft/components/profile/list/ListPage.tsx","../node_modules/react-window-infinite-loader/dist/index.esm.js","nft/components/profile/view/FilterSidebar.tsx","nft/components/profile/view/ProfilePage.css.ts","nft/components/profile/view/ProfilePageLoadingSkeleton.tsx","nft/components/profile/view/ViewMyNftsAsset.tsx","nft/components/profile/view/ProfilePage.tsx","nft/pages/profile/profile.tsx","nft/pages/profile/shared.ts"],"names":["Checkbox","hovered","children","props","as","display","alignItems","position","overflow","cursor","lineHeight","borderColor","checked","className","styles","background","undefined","type","clsx","Input","forwardRef","ref","default","focus","borderWidth","borderStyle","borderRadius","padding","fontSize","color","placeholder","backgroundColor","displayName","NumericInput","inputMode","autoComplete","onInput","v","currentTarget","value","isNumber","parseFloat","assetList","input","checkbox","checkMark","checkMarkActive","FilterButton","onClick","isMobile","isFiltersExpanded","collectionCount","hideResultsCount","window","innerWidth","breakpoints","sm","md","Box","gap","width","height","whiteSpace","buttonTextMedium","putCommas","pluralize","ClearAllButton","styled","button","theme","textTertiary","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Link","_ref","_ref$color","_ref$size","size","rest","React","createElement","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","propTypes","PropTypes","string","oneOfType","number","Twitter","SetPriceMethod","WarningType","ModalWrapper","Column","Z_INDEX","modal","backgroundSurface","backgroundOutline","deepShadow","BREAKPOINTS","CloseIconWrapper","div","CloseIcon","X","HazardIconWrap","ContinueButton","ButtonPrimary","EditListings","span","accentAction","BelowFloorWarningModal","listingsBelowFloor","closeModal","startListing","useTheme","Portal","accentCritical","HeadlineSmall","textAlign","BodyPrimary","price","floorPrice","toFixed","e","preventDefault","stopPropagation","Overlay","RemoveIconWrap","TitleRow","Row","approveCollectionRow","collectionRow","signer","setCollectionStatusAndCallback","callback","ListingStatus","SIGNING","marketplace","collectionAddress","nftStandard","addresses","addressesByNetwork","SupportedChainId","MAINNET","spender","name","OPENSEA_CROSS_CHAIN_CONDUIT","NftStandard","Erc721","LOOKSRARE_MARKETPLACE_CONTRACT_721","LOOKSRARE_MARKETPLACE_CONTRACT_1155","X2Y2_TRANSFER_CONTRACT_721","X2Y2_TRANSFER_CONTRACT_1155","TRANSFER_MANAGER_ERC721","approveCollection","newStatus","signListingRow","listing","provider","getLooksRareNonce","setLooksRareNonce","setListingStatusAndCallback","looksRareNonce","asset","signListing","getTotalEthValue","sellAssets","total","reduce","newListings","maxListing","a","b","maxFee","fee","LOOKS_RARE_CREATOR_BASIS_POINTS","basisPoints","Math","round","Number","EPSILON","useSubscribeListingState","useSellAsset","state","useNFTList","setListings","setCollectionsRequiringApproval","shallow","useEffect","newCollectionsToApprove","forEach","marketplaces","newListing","images","smallImageUrl","icon","tokenId","status","DEFINED","find","push","some","asset_contract","address","newCollectionRow","image_url","isVerified","collectionIsVerified","tokenType","getListings","Section","getRoyalty","listingMarket","getMarketplaceFee","StyledListingButton","BaseButton","showResolveIssues","accentFailure","accentTextLightPrimary","missingPrices","ListingButton","toggleShowResolveIssues","issues","setIssues","useState","showWarning","setShowWarning","useIsMobile","useMemo","missingExpiration","expirationTime","isNaN","Date","now","overMaxExpiration","listingsMissingPrice","listingsAboveSellOrderFloor","overrideFloorPrice","floor_sell_order_price","Erc1155","findListingIssues","foundIssues","ContentColumn","failed","opacify","ContentRowWrapper","active","CollectionIcon","img","AssetIcon","MarketplaceIcon","ContentName","ThemedText","SubHeaderSmall","textPrimary","ProceedText","textSecondary","FailedText","StyledVerifiedIcon","VerifiedIcon","IconWrapper","ButtonRow","failedButtonStyle","css","RemoveButton","accentTextDarkPrimary","RetryButton","backgroundInteractive","ContentRow","row","isCollectionApprovalSection","removeRow","rowRef","useRef","FAILED","REJECTED","current","scroll","APPROVED","src","PENDING","accentSuccess","justify","SectionHeader","SectionTitle","SubHeader","approved","SectionArrow","ChevronUpIcon","TRANSITION_DURATIONS","medium","SectionBody","colors","gray650","ScrollBarStyles","StyledInfoIcon","Info","ContentRowContainer","Duration","ErrorState","ListModalSection","sectionType","content","toggleSection","removeAssetMarketplace","allContentApproved","APPROVE","uniqueCollections","collections","map","collection","Set","listingRow","marginLeft","secondaryColor","marginBottom","Caption","text","SuccessImage","numImages","SuccessImageWrapper","ProceedsColumn","buttonStyle","ReturnButton","TweetButton","TweetRow","SuccessScreen","overlayClick","nativeCurrency","useNativeCurrency","totalEthListingValue","parsedAmount","tryParseCurrencyAmount","toString","usdcValue","useStablecoinValue","imageUrl","align","formatEth","BodySmall","formatCurrencyAmount","NumberType","FiatTokenPrice","flexWrap","location","reload","href","generateTweetForList","rel","ListModalWrapper","ListModal","useWeb3React","getSigner","trace","useTrace","InterfaceModalName","NFT_LISTING","collectionsRequiringApproval","listings","useReducer","s","SIGN","openSection","toggleOpenSection","usdcAmount","allCollectionsApproved","every","allListingsApproved","signListings","sendAnalyticsEvent","NFTEventName","NFT_LISTING_COMPLETED","signatures_approved","filter","list_quantity","usd_value","closeModalOnClick","useCallback","DropdownWrapper","$width","DropdownRow","Dropdown","dropDownOptions","option","displayText","isSelected","PriceTextInputWrapper","InputWrapper","CurrencyWrapper","listPrice","GlobalPriceIcon","WarningRow","WarningMessage","$color","WarningAction","getWarningMessage","warning","message","BELOW_FLOOR","ALREADY_LISTED","PriceTextInput","setListPrice","isGlobalPrice","setGlobalOverride","globalOverride","NONE","warningType","setWarningType","removeSellAsset","inputRef","percentBelowFloor","warningColor","red400","accentWarning","useUpdateInputAndWarnings","pattern","body","onChange","event","includes","val","FeeWrap","RoyaltyContainer","MarketIcon","FeePercent","MaxFeeContainer","RoyaltyTooltip","selectedMarkets","fees","maxRoyalty","max","market","marginRight","LastPriceInfo","lg","FloorPriceInfo","RemoveMarketplaceWrap","MarketIconsWrapper","MarketIconWrapper","index","ExpandMarketIconWrapper","FeeColumnWrapper","FeeWrapper","ReturnColumn","MarketplaceRow","globalPriceMethod","globalPrice","setGlobalPrice","removeMarket","expandMarketplaceRows","toggleExpandMarketplaceRows","rowHovered","setAssetListPrice","marketIconHovered","toggleMarketIconHovered","marketRowHovered","toggleMarketRowHovered","showGlobalPrice","SAME_PRICE","setPrice","selectedMarket","feeInEth","userReceives","useHandleGlobalPriceToggle","FLOOR_PRICE","LAST_PRICE","lastPrice","useSyncPriceWithGlobalMethod","onMouseEnter","onMouseLeave","flex","alt","placement","ethPrice","EthPriceDisplay","ethConversion","setEthConversion","fetchPrice","then","formatUsdPrice","NFTListRowWrapper","RemoveIconContainer","opacity","hover","NFTInfoWrapper","NFTImage","HideTextOverflow","TokenInfoWrapper","TokenName","CollectionName","MarketPlaceRowWrapper","NFTListRow","removeAsset","localMarkets","setLocalMarkets","toggleHovered","JSON","parse","stringify","style","oldMarket","TableHeader","backgroundBackdrop","NFTHeader","PriceHeaders","LastPriceHeader","FloorPriceHeader","DropdownAndHeaderWrapper","DropdownPromptContainer","DropdownPrompt","DropdownChevron","ChevronDown","isOpen","transition","duration","timing","fast","ease","DropdownContainer","FeeUserReceivesSharedStyles","FeeHeader","UserReceivesHeader","RowDivider","hr","NFTListingsGrid","CUSTOM","setGlobalPriceMethod","showDropdown","toggleShowDropdown","dropdownRef","useOnClickOutside","prompt","priceDropdownOptions","MarketplaceRowWrapper","MarketplaceDropdownIcon","FeeText","HeaderButtonWrap","SMALL_MEDIA_BREAKPOINT","HeaderButtonContentWrapper","totalSelected","Chevron","modalBackdrop","SelectMarketplacesDropdown","setSelectedMarkets","toggleIsOpen","dropdownDisplayText","themeVars","ListingMarkets","toggleSelected","selected","caption","isInvalid","dropdown","ErrorMessage","WarningIcon","AlertTriangle","SetDurationModal","day","setDuration","amount","setAmount","valid","errorState","setErrorState","setGlobalExpiration","durationDropdownRef","durationOptions","hour","week","month","expiration","convertDurationToExpiration","empty","overMax","flexShrink","durationFactor","ListingHeader","xs","ArrowContainer","BackArrow","ArrowLeft","TitleWrapper","ButtonsWrapper","MarketWrap","section","ListingHeaderRow","GridWrapper","FloatingConfirmationBar","LIST_PAGE_MARGIN","under_dropdown","shallowShadow","LIST_PAGE_MARGIN_MOBILE","UsdValue","ProceedsAndButtonWrapper","ProceedsWrapper","EthValueWrapper","ListPage","setSellPageState","useProfilePageState","setProfilePageState","setGlobalMarketplaces","showListModal","toggleShowListModal","startListingEventProperties","collection_addresses","token_ids","Array","from","startListingFlow","NFT_SELL_START_LISTING","getAddress","signerAddress","looksRareNonceFetcher","nonce","PAUSED","BannerText","ProfilePageStateType","VIEWING","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","possibleConstructorReturn","self","ReferenceError","InfiniteLoader","_PureComponent","_temp","_this","_len","args","_key","__proto__","getPrototypeOf","concat","_lastRenderedStartIndex","_lastRenderedStopIndex","_memoizedUnloadedRanges","_onItemsRendered","_ref2","visibleStartIndex","visibleStopIndex","_ensureRowsLoaded","_setRef","listRef","_listRef","subClass","superClass","create","constructor","setPrototypeOf","inherits","autoReload","process","onItemsRendered","startIndex","stopIndex","_props","isItemLoaded","itemCount","_props$minimumBatchSi","minimumBatchSize","_props$threshold","threshold","unloadedRanges","rangeStartIndex","rangeStopIndex","_index","potentialStopIndex","min","_index2","_index3","scanForUnloadedRanges","startOrStop","_loadUnloadedRanges","_this2","loadMoreItems","loadMoreRows","_loop","promise","lastRenderedStartIndex","lastRenderedStopIndex","isRangeVisible","resetAfterIndex","_getItemStyleCache","forceUpdate","PureComponent","ItemsContainer","LongLoadingBubble","LoadingBubble","SmallLoadingBubble","MobileMenuHeader","LoadingCollectionItem","justifyContent","paddingLeft","paddingRight","FilterSidebar","fetchNextPage","hasNextPage","isFetchingNextPage","walletCollections","collectionFilters","useWalletCollections","setCollectionFilters","useFiltersExpanded","setFiltersExpanded","sidebarX","useSpring","config","easing","easings","easeOutSine","hideSearch","WALLET_COLLECTIONS_PAGINATION_LIMIT","top","left","zIndex","transform","to","x","paddingTop","CollectionSelect","collectionSearchText","setCollectionSearchText","displayCollections","setDisplayCollections","filtered","toLowerCase","itemKey","data","CollectionFilterRow","subhead","marginTop","paddingBottom","maxHeight","disableWidth","itemSize","CollectionFilterSearch","CollectionItem","isCheckboxSelected","setCheckboxSelected","isChecked","handleCheckbox","maxWidth","overflowX","overflowY","fontWeight","image","textOverflow","minHeight","count","SkeletonPageWrapper","ScreenBreakpointsPaddings","breakpoint","SkeletonBodyWrapper","SkeletonRowWrapper","AccountDetailsSkeletonWrapper","ProfileDetailsSkeleton","FilterBarSkeletonWrapper","FilterButtonSkeleton","SellButtonSkeleton","ProfileAssetCardSkeleton","ProfileAssetCardDisplaySectionSkeleton","DEFAULT_WALLET_ASSET_QUERY_AMOUNT","_","loadingAsset","ProfileBodyLoadingSkeleton","ProfilePageLoadingSkeleton","ViewMyNftsAsset","mediaShouldBePlaying","setCurrentTokenPlayingMedia","hideDetails","selectSellAsset","cartExpanded","useBag","bagExpanded","toggleCart","toggleBag","item","handleSelect","NFT_SELL_ITEM_ADDED","collection_address","token_id","isDisabled","susFlag","primaryInfo","primaryInfoIcon","secondaryInfo","selectedInfo","notSelectedInfo","disabledInfo","Boolean","selectAsset","unselectAsset","testId","doNotLinkToDetails","ProfilePageColumn","ProfileHeader","EmptyStateContainer","ProfilePage","useWalletBalance","setWalletCollections","resetSellAssets","reset","getOwnerCollections","pageParam","OSCollectionsFetcher","params","asset_owner","offset","limit","res","nextPage","useInfiniteQuery","getNextPageParam","lastGroup","refetchInterval","refetchIntervalInBackground","refetchOnWindowFocus","refetchOnMount","ownerCollectionsData","isSuccess","ownerCollections","pages","page","flat","fallback","paddingX","paddingY","bottom","ProfilePageNfts","clearCollectionFilters","isBagExpanded","currentTokenPlayingMedia","useNftBalance","ownerAssets","walletAssets","loading","hasNext","loadMore","gridX","next","hasMore","loader","dataLength","CollectionFiltersRow","getCollection","handleClearAllClick","CollectionFilterItem","border","ProfilePageWrapper","LoadedAccountPage","isListingNfts","XXXL_BAG_WIDTH","Center","ConnectWalletButton","ProfileContent","sellPageState","account","accountRef","toggleWalletDrawer","useToggleWalletDrawer","LISTING","InterfacePageName","NFT_PROFILE_PAGE","shouldLogImpression","HeadlineMedium","Profile"],"mappings":"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","file":"static/js/9.87f3ad02.chunk.js","sourcesContent":["import clsx from 'clsx'\nimport { Box } from 'nft/components/Box'\nimport { ApprovedCheckmarkIcon } from 'nft/components/icons'\nimport React from 'react'\n\nimport * as styles from './Checkbox.css'\n\ninterface CheckboxProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  hovered: boolean\n  children: React.ReactNode\n}\n\nexport const Checkbox: React.FC<CheckboxProps> = ({ hovered, children, ...props }: CheckboxProps) => {\n  return (\n    <Box\n      as=\"label\"\n      display=\"flex\"\n      alignItems=\"center\"\n      position=\"relative\"\n      overflow=\"hidden\"\n      cursor=\"pointer\"\n      lineHeight=\"1\"\n    >\n      {children}\n      <Box\n        as=\"span\"\n        borderColor={props.checked || hovered ? 'accentAction' : 'gray400'}\n        className={styles.checkbox}\n        background={props.checked ? 'accentAction' : undefined}\n        // This element is purely decorative so\n        // we hide it for screen readers\n        aria-hidden=\"true\"\n      />\n      <input {...props} className={styles.input} type=\"checkbox\" />\n      <ApprovedCheckmarkIcon className={clsx(styles.checkMark, props.checked && styles.checkMarkActive)} />\n    </Box>\n  )\n}\n","import { isNumber } from 'nft/utils/numbers'\nimport { FormEvent, forwardRef } from 'react'\n\nimport { Box, BoxProps } from '../Box'\n\nexport const Input = forwardRef<HTMLInputElement, BoxProps>((props, ref) => (\n  <Box\n    ref={ref}\n    as=\"input\"\n    borderColor={{ default: 'backgroundOutline', focus: 'textSecondary' }}\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderRadius=\"12\"\n    padding=\"12\"\n    fontSize=\"14\"\n    color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\n    backgroundColor=\"transparent\"\n    {...props}\n  />\n))\n\nInput.displayName = 'Input'\n\nexport const NumericInput = forwardRef<HTMLInputElement, BoxProps>((props, ref) => {\n  return (\n    <Box\n      ref={ref}\n      as=\"input\"\n      inputMode=\"decimal\"\n      autoComplete=\"off\"\n      type=\"text\"\n      borderColor={{ default: 'backgroundOutline', focus: 'textSecondary' }}\n      color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\n      onInput={(v: FormEvent<HTMLInputElement>) => {\n        if (v.currentTarget.value === '.') {\n          v.currentTarget.value = '0.'\n        }\n\n        v.currentTarget.value =\n          !!v.currentTarget.value && isNumber(v.currentTarget.value) && parseFloat(v.currentTarget.value) >= 0\n            ? v.currentTarget.value\n            : ''\n      }}\n      {...props}\n    />\n  )\n})\n\nNumericInput.displayName = 'Input'\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/CollectionNfts.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/CollectionNfts.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xdzV0MDRwMSB7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoY2FsYygxMDAlLzIgLSA4cHgpLCAxZnIpICk7Cn0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIHsKICAuXzF3NXQwNHAxIHsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KGNhbGMoMTAwJS8zIC0gOHB4KSwgMWZyKSApOwogIH0KfQpAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDI0cHgpIHsKICAuXzF3NXQwNHAxIHsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KGNhbGMoMTAwJS8zIC0gMTJweCksIDFmcikgKTsKICB9Cn0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTI4MHB4KSB7CiAgLl8xdzV0MDRwMSB7CiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heChjYWxjKDEwMCUvNCAtIDE2cHgpLCAxZnIpICk7CiAgfQp9CkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE1MzZweCkgewogIC5fMXc1dDA0cDEgewogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoY2FsYygxMDAlLzUgLSAxNnB4KSwgMWZyKSApOwogIH0KfQpAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxOTIwcHgpIHsKICAuXzF3NXQwNHAxIHsKICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KGNhbGMoMTAwJS83IC0gMTZweCksIDFmcikgKTsKICB9Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetList = '_1w5t04p1 rgw6ez4sj rgw6ez4ec rgw6ez4ed rgw6ez4es rgw6ez4f7';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/layout/Checkbox.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/layout/Checkbox.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LmpxeDA5YTEgewogIHRvcDogLTI0cHg7Cn0KLmpxeDA5YTFbdHlwZT0iY2hlY2tib3giXSB7CiAgY2xpcDogcmVjdCgwIDAgMCAwKTsKICBjbGlwLXBhdGg6IGluc2V0KDUwJSk7CiAgaGVpZ2h0OiAxcHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICB3aWR0aDogMXB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var input = 'jqx09a1 rgw6ez4wf';\nexport var checkbox = 'rgw6ez4sc rgw6ezu7 rgw6ez7zd rgw6ez1gd rgw6ez18e rgw6ez7yh rgw6ez885';\nexport var checkMark = 'rgw6ez4rk rgw6ez1gd rgw6ez18e rgw6ez551';\nexport var checkMarkActive = 'rgw6ez4sc rgw6ez551 rgw6ez4wf rgw6ez3y0 rgw6ez3rs';","import clsx from 'clsx'\nimport { Box } from 'nft/components/Box'\nimport * as styles from 'nft/components/collection/FilterButton.css'\nimport { FilterIcon } from 'nft/components/icons'\nimport { buttonTextMedium } from 'nft/css/common.css'\nimport { breakpoints } from 'nft/css/sprinkles.css'\nimport { pluralize, putCommas } from 'nft/utils'\n\nexport const FilterButton = ({\n  onClick,\n  isMobile,\n  isFiltersExpanded,\n  collectionCount = 0,\n}: {\n  isMobile: boolean\n  isFiltersExpanded: boolean\n  onClick: () => void\n  collectionCount?: number\n}) => {\n  const hideResultsCount = window.innerWidth >= breakpoints.sm && window.innerWidth < breakpoints.md\n\n  return (\n    <Box\n      className={clsx(styles.filterButton, !isFiltersExpanded && styles.filterButtonExpanded)}\n      display=\"flex\"\n      gap=\"8\"\n      borderRadius=\"12\"\n      fontSize=\"16\"\n      cursor=\"pointer\"\n      position=\"relative\"\n      onClick={onClick}\n      padding=\"12\"\n      width={isMobile ? '44' : 'auto'}\n      height=\"44\"\n      whiteSpace=\"nowrap\"\n      color=\"white\"\n      data-testid=\"nft-filter\"\n    >\n      <FilterIcon />\n      {!isMobile ? (\n        <Box className={buttonTextMedium}>\n          {' '}\n          {!collectionCount || hideResultsCount\n            ? 'Filter'\n            : `Filter • ${putCommas(collectionCount)} result${pluralize(collectionCount)}`}\n        </Box>\n      ) : null}\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/loading.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/loading.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMmtkdmZ3MCB7CiAgMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7CiAgfQogIDEwMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlOwogIH0KfQouXzJrZHZmdzEgewogIGFuaW1hdGlvbjogXzJrZHZmdzAgMS41cyBpbmZpbml0ZTsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjN0M4NUEyNEQgMjUlLCByZ2JhKDAsMCwwLDAuMykgNTAlLCAjN0M4NUEyNEQgNzUlKTsKICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtcG9zaXRpb247Cn0KLl8ya2R2ZnczIHsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/FilterButton.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/FilterButton.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbGl3ZHpvMSB7CiAgYmFja2dyb3VuZDogdmFyKC0tcmd3NmV6YSk7CiAgY29sb3I6IHZhcigtLWdlbmllLWNvbG9ycy10ZXh0UHJpbWFyeSk7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var filterButton = 'rgw6ez721 rgw6ez52p';\nexport var filterButtonExpanded = '_1liwdzo1';\nexport var filterButtonLoading = '_2kdvfw3 _2kdvfw1 rgw6ez7zp rgw6ez7y1 rgw6ez54p rgw6ez1hq rgw6ez1bp';","import styled from 'styled-components/macro'\n\nexport const ClearAllButton = styled.button`\n  color: ${({ theme }) => theme.textTertiary};\n  padding-left: 8px;\n  padding-right: 8px;\n  font-size: 14px;\n  font-weight: 600;\n  border: none;\n  cursor: pointer;\n  background: none;\n`\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Link = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"\n  }));\n});\nLink.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nLink.displayName = 'Link';\nexport default Link;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Twitter = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z\"\n  }));\n});\nTwitter.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nTwitter.displayName = 'Twitter';\nexport default Twitter;","import Row from 'components/Row'\nimport styled from 'styled-components/macro'\n\nexport const RemoveIconWrap = styled.div<{ hovered: boolean }>`\n  position: absolute;\n  left: 50%;\n  top: 30px;\n  transform: translateX(-50%);\n  width: 32px;\n  visibility: ${({ hovered }) => (hovered ? 'visible' : 'hidden')};\n`\n\nexport const TitleRow = styled(Row)`\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nexport enum SetPriceMethod {\n  SAME_PRICE,\n  FLOOR_PRICE,\n  LAST_PRICE,\n  CUSTOM,\n}\n\nexport enum WarningType {\n  BELOW_FLOOR,\n  ALREADY_LISTED,\n  NONE,\n}\n","import { Plural, t, Trans } from '@lingui/macro'\nimport { ButtonPrimary } from 'components/Button'\nimport Column from 'components/Column'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { Listing, WalletAsset } from 'nft/types'\nimport React from 'react'\nimport { AlertTriangle, X } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\n\nconst ModalWrapper = styled(Column)`\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 420px;\n  z-index: ${Z_INDEX.modal};\n  background: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 20px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  padding: 20px 24px 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: 100%;\n  }\n`\nconst CloseIconWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\nconst CloseIcon = styled(X)`\n  cursor: pointer;\n  &:hover {\n    opacity: 0.6;\n  }\n`\n\nconst HazardIconWrap = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  padding: 32px 120px;\n`\n\nconst ContinueButton = styled(ButtonPrimary)`\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 24px;\n  margin-top: 12px;\n`\n\nconst EditListings = styled.span`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.accentAction};\n  text-align: center;\n  cursor: pointer;\n  padding: 12px 16px;\n\n  &:hover {\n    opacity: 0.6;\n  }\n`\n\nexport const BelowFloorWarningModal = ({\n  listingsBelowFloor,\n  closeModal,\n  startListing,\n}: {\n  listingsBelowFloor: [WalletAsset, Listing][]\n  closeModal: () => void\n  startListing: () => void\n}) => {\n  const theme = useTheme()\n  const clickContinue = (e: React.MouseEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    startListing()\n    closeModal()\n  }\n  return (\n    <Portal>\n      <ModalWrapper>\n        <CloseIconWrapper>\n          <CloseIcon width={24} height={24} onClick={closeModal} />{' '}\n        </CloseIconWrapper>\n        <HazardIconWrap>\n          <AlertTriangle height={90} width={90} color={theme.accentCritical} />\n        </HazardIconWrap>\n        <ThemedText.HeadlineSmall lineHeight=\"28px\" textAlign=\"center\">\n          <Trans>Low listing price</Trans>\n        </ThemedText.HeadlineSmall>\n        <ThemedText.BodyPrimary textAlign=\"center\">\n          <Plural\n            value={listingsBelowFloor.length !== 1 ? 2 : 1}\n            _1={t`One NFT is listed ${(\n              (1 - (listingsBelowFloor[0][1].price ?? 0) / (listingsBelowFloor[0][0].floorPrice ?? 0)) *\n              100\n            ).toFixed(0)}% `}\n            other={t`${listingsBelowFloor.length} NFTs are listed significantly `}\n          />\n          &nbsp;\n          <Trans>below the collection’s floor price. Are you sure you want to continue?</Trans>\n        </ThemedText.BodyPrimary>\n        <ContinueButton onClick={clickContinue}>\n          <Trans>Continue</Trans>\n        </ContinueButton>\n        <EditListings onClick={closeModal}>\n          <Trans>Edit listings</Trans>\n        </EditListings>\n      </ModalWrapper>\n      <Overlay onClick={closeModal} />\n    </Portal>\n  )\n}\n","import type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport ms from 'ms.macro'\nimport { SetPriceMethod, WarningType } from 'nft/components/profile/list/shared'\nimport { useNFTList, useSellAsset } from 'nft/hooks'\nimport {\n  LOOKSRARE_MARKETPLACE_CONTRACT_721,\n  LOOKSRARE_MARKETPLACE_CONTRACT_1155,\n  X2Y2_TRANSFER_CONTRACT_721,\n  X2Y2_TRANSFER_CONTRACT_1155,\n} from 'nft/queries'\nimport { OPENSEA_CROSS_CHAIN_CONDUIT } from 'nft/queries/openSea'\nimport { CollectionRow, Listing, ListingMarket, ListingRow, ListingStatus, WalletAsset } from 'nft/types'\nimport { approveCollection, LOOKS_RARE_CREATOR_BASIS_POINTS, signListing } from 'nft/utils/listNfts'\nimport { Dispatch, useEffect } from 'react'\nimport { shallow } from 'zustand/shallow'\n\nexport async function approveCollectionRow(\n  collectionRow: CollectionRow,\n  signer: JsonRpcSigner,\n  setCollectionStatusAndCallback: (\n    collection: CollectionRow,\n    status: ListingStatus,\n    callback?: () => Promise<void>\n  ) => void\n) {\n  const callback = () => approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback)\n  setCollectionStatusAndCallback(collectionRow, ListingStatus.SIGNING, callback)\n  const { marketplace, collectionAddress, nftStandard } = collectionRow\n  const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n  const spender =\n    marketplace.name === 'OpenSea'\n      ? OPENSEA_CROSS_CHAIN_CONDUIT\n      : marketplace.name === 'LooksRare'\n      ? collectionRow.nftStandard === NftStandard.Erc721\n        ? LOOKSRARE_MARKETPLACE_CONTRACT_721\n        : LOOKSRARE_MARKETPLACE_CONTRACT_1155\n      : marketplace.name === 'X2Y2'\n      ? collectionRow.nftStandard === NftStandard.Erc721\n        ? X2Y2_TRANSFER_CONTRACT_721\n        : X2Y2_TRANSFER_CONTRACT_1155\n      : addresses.TRANSFER_MANAGER_ERC721\n  !!collectionAddress &&\n    (await approveCollection(\n      spender,\n      collectionAddress,\n      signer,\n      (newStatus: ListingStatus) => setCollectionStatusAndCallback(collectionRow, newStatus, callback),\n      nftStandard\n    ))\n}\n\nexport async function signListingRow(\n  listing: ListingRow,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  getLooksRareNonce: () => number,\n  setLooksRareNonce: (nonce: number) => void,\n  setListingStatusAndCallback: (listing: ListingRow, status: ListingStatus, callback?: () => Promise<void>) => void\n) {\n  const looksRareNonce = getLooksRareNonce()\n  const callback = () => {\n    return signListingRow(listing, signer, provider, getLooksRareNonce, setLooksRareNonce, setListingStatusAndCallback)\n  }\n  setListingStatusAndCallback(listing, ListingStatus.SIGNING, callback)\n  const { asset, marketplace } = listing\n  const res = await signListing(marketplace, asset, signer, provider, looksRareNonce, (newStatus: ListingStatus) =>\n    setListingStatusAndCallback(listing, newStatus, callback)\n  )\n  res && listing.marketplace.name === 'LooksRare' && setLooksRareNonce(looksRareNonce + 1)\n}\n\nexport const getTotalEthValue = (sellAssets: WalletAsset[]) => {\n  const total = sellAssets.reduce((total, asset: WalletAsset) => {\n    if (asset.newListings?.length) {\n      const maxListing = asset.newListings.reduce((a, b) => ((a.price ?? 0) > (b.price ?? 0) ? a : b))\n      // LooksRare is a unique case where creator royalties are a flat 0.5% or 50 basis points\n      const maxFee =\n        maxListing.marketplace.fee +\n        (maxListing.marketplace.name === 'LooksRare' ? LOOKS_RARE_CREATOR_BASIS_POINTS : asset?.basisPoints ?? 0) / 100\n      return total + (maxListing.price ?? 0) - (maxListing.price ?? 0) * (maxFee / 100)\n    }\n    return total\n  }, 0)\n  return total ? Math.round(total * 10000 + Number.EPSILON) / 10000 : 0\n}\n\nconst getListings = (sellAssets: WalletAsset[]): [CollectionRow[], ListingRow[]] => {\n  const newCollectionsToApprove: CollectionRow[] = []\n\n  const newListings: ListingRow[] = []\n  sellAssets.forEach((asset) => {\n    asset.marketplaces?.forEach((marketplace: ListingMarket) => {\n      const newListing = {\n        images: [asset.smallImageUrl, marketplace.icon],\n        name: asset.name || `#${asset.tokenId}`,\n        status: ListingStatus.DEFINED,\n        asset,\n        marketplace,\n        price: asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price,\n      }\n      newListings.push(newListing)\n      if (\n        !newCollectionsToApprove.some(\n          (collectionRow: CollectionRow) =>\n            collectionRow.collectionAddress === asset.asset_contract.address &&\n            collectionRow.marketplace.name === marketplace.name\n        )\n      ) {\n        const newCollectionRow = {\n          images: [asset.asset_contract.image_url, marketplace.icon],\n          name: asset.asset_contract.name,\n          status: ListingStatus.DEFINED,\n          collectionAddress: asset.asset_contract.address,\n          isVerified: asset.collectionIsVerified,\n          marketplace,\n          nftStandard: asset.asset_contract.tokenType,\n        }\n        newCollectionsToApprove.push(newCollectionRow)\n      }\n    })\n  })\n  return [newCollectionsToApprove, newListings]\n}\n\nexport const verifyStatus = (status: ListingStatus) => {\n  return status !== ListingStatus.PAUSED && status !== ListingStatus.APPROVED\n}\n\nexport function useSubscribeListingState() {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const { setListings, setCollectionsRequiringApproval } = useNFTList(\n    ({ setListings, setCollectionsRequiringApproval }) => ({\n      setListings,\n      setCollectionsRequiringApproval,\n    }),\n    shallow\n  )\n  useEffect(() => {\n    const [newCollectionsToApprove, newListings] = getListings(sellAssets)\n    setListings(newListings)\n    setCollectionsRequiringApproval(newCollectionsToApprove)\n  }, [sellAssets, setCollectionsRequiringApproval, setListings])\n}\n\nexport function useHandleGlobalPriceToggle(\n  globalOverride: boolean,\n  setListPrice: Dispatch<number | undefined>,\n  setPrice: (price?: number) => void,\n  listPrice?: number,\n  globalPrice?: number\n) {\n  useEffect(() => {\n    let price: number | undefined\n    if (globalOverride) {\n      if (!listPrice) setListPrice(globalPrice)\n      price = globalPrice\n    } else {\n      price = listPrice\n    }\n    setPrice(price)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalOverride])\n}\n\nexport function useSyncPriceWithGlobalMethod(\n  asset: WalletAsset,\n  setListPrice: Dispatch<number | undefined>,\n  setGlobalPrice: Dispatch<number | undefined>,\n  setGlobalOverride: Dispatch<boolean>,\n  listPrice?: number,\n  globalPrice?: number,\n  globalPriceMethod?: SetPriceMethod\n) {\n  useEffect(() => {\n    if (globalPriceMethod === SetPriceMethod.FLOOR_PRICE) {\n      setListPrice(asset?.floorPrice)\n      setGlobalPrice(asset.floorPrice)\n    } else if (globalPriceMethod === SetPriceMethod.LAST_PRICE) {\n      setListPrice(asset.lastPrice)\n      setGlobalPrice(asset.lastPrice)\n    } else if (globalPriceMethod === SetPriceMethod.SAME_PRICE)\n      listPrice && !globalPrice ? setGlobalPrice(listPrice) : setListPrice(globalPrice)\n\n    setGlobalOverride(false)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalPriceMethod])\n}\n\nexport function useUpdateInputAndWarnings(\n  setWarningType: Dispatch<WarningType>,\n  inputRef: React.MutableRefObject<HTMLInputElement>,\n  asset: WalletAsset,\n  listPrice?: number\n) {\n  useEffect(() => {\n    setWarningType(WarningType.NONE)\n    const price = listPrice ?? 0\n    inputRef.current.value = `${price}`\n    if (price < (asset?.floorPrice ?? 0) && price > 0) setWarningType(WarningType.BELOW_FLOOR)\n    else if (\n      asset.floor_sell_order_price &&\n      price >= asset.floor_sell_order_price &&\n      asset.asset_contract.tokenType !== NftStandard.Erc1155\n    )\n      setWarningType(WarningType.ALREADY_LISTED)\n  }, [\n    asset.asset_contract.tokenType,\n    asset?.floorPrice,\n    asset.floor_sell_order_price,\n    inputRef,\n    listPrice,\n    setWarningType,\n  ])\n}\n\nexport const getRoyalty = (listingMarket: ListingMarket, asset: WalletAsset) => {\n  // LooksRare is a unique case where royalties for creators are a flat 0.5% or 50 basis points if royalty is set\n  const baseFee =\n    listingMarket.name === 'LooksRare'\n      ? asset.basisPoints\n        ? LOOKS_RARE_CREATOR_BASIS_POINTS\n        : 0\n      : asset.basisPoints ?? 0\n\n  return baseFee * 0.01\n}\n\n// OpenSea has a 0.5% fee for all assets that do not have a royalty set\nexport const getMarketplaceFee = (listingMarket: ListingMarket, asset: WalletAsset) => {\n  return listingMarket.name === 'OpenSea' && !asset.basisPoints ? 0.5 : listingMarket.fee\n}\n\nconst BELOW_FLOOR_PRICE_THRESHOLD = 0.8\n\nexport const findListingIssues = (sellAssets: WalletAsset[]) => {\n  const missingExpiration = sellAssets.some((asset) => {\n    return (\n      asset.expirationTime != null &&\n      (isNaN(asset.expirationTime) || asset.expirationTime * 1000 - Date.now() < ms`60 seconds`)\n    )\n  })\n  const overMaxExpiration = sellAssets.some((asset) => {\n    return asset.expirationTime != null && asset.expirationTime * 1000 - Date.now() > ms`180 days`\n  })\n\n  const listingsMissingPrice: [WalletAsset, Listing][] = []\n  const listingsBelowFloor: [WalletAsset, Listing][] = []\n  const listingsAboveSellOrderFloor: [WalletAsset, Listing][] = []\n  for (const asset of sellAssets) {\n    if (asset.newListings) {\n      for (const listing of asset.newListings) {\n        if (!listing.price) listingsMissingPrice.push([asset, listing])\n        else if (listing.price < (asset?.floorPrice ?? 0) * BELOW_FLOOR_PRICE_THRESHOLD && !listing.overrideFloorPrice)\n          listingsBelowFloor.push([asset, listing])\n        else if (\n          asset.floor_sell_order_price &&\n          listing.price >= asset.floor_sell_order_price &&\n          asset.asset_contract.tokenType !== NftStandard.Erc1155\n        )\n          listingsAboveSellOrderFloor.push([asset, listing])\n      }\n    }\n  }\n  return {\n    missingExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n  }\n}\n","import { Plural, Trans } from '@lingui/macro'\nimport Column from 'components/Column'\nimport { ScrollBarStyles } from 'components/Common'\nimport Row from 'components/Row'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { ChevronUpIcon, ListingModalWindowActive, ListingModalWindowClosed } from 'nft/components/icons'\nimport { useSellAsset } from 'nft/hooks'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { useMemo } from 'react'\nimport { Info } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { colors } from 'theme/colors'\nimport { TRANSITION_DURATIONS } from 'theme/styles'\n\nimport { ContentRow } from './ContentRow'\n\nconst SectionHeader = styled(Row)`\n  justify-content: space-between;\n`\n\nconst SectionTitle = styled(ThemedText.SubHeader)<{ active: boolean; approved: boolean }>`\n  line-height: 24px;\n  color: ${({ theme, active, approved }) =>\n    approved ? theme.accentSuccess : active ? theme.textPrimary : theme.textSecondary};\n`\n\nconst SectionArrow = styled(ChevronUpIcon)<{ active: boolean }>`\n  height: 24px;\n  width: 24px;\n  cursor: pointer;\n  transition: ${TRANSITION_DURATIONS.medium}ms;\n  transform: rotate(${({ active }) => (active ? 0 : 180)}deg);\n`\n\nconst SectionBody = styled(Column)`\n  border-left: 1.5px solid ${colors.gray650};\n  margin-top: 4px;\n  margin-left: 7px;\n  padding-top: 4px;\n  padding-left: 20px;\n  max-height: 394px;\n  overflow-y: auto;\n  ${ScrollBarStyles}\n`\n\nconst StyledInfoIcon = styled(Info)`\n  height: 16px;\n  width: 16px;\n  margin-left: 4px;\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nconst ContentRowContainer = styled(Column)`\n  gap: 8px;\n  scroll-behavior: smooth;\n`\n\nexport const enum Section {\n  APPROVE,\n  SIGN,\n}\n\ninterface ListModalSectionProps {\n  sectionType: Section\n  active: boolean\n  content: AssetRow[]\n  toggleSection: React.DispatchWithoutAction\n}\n\nexport const ListModalSection = ({ sectionType, active, content, toggleSection }: ListModalSectionProps) => {\n  const theme = useTheme()\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\n  const allContentApproved = useMemo(() => !content.some((row) => row.status !== ListingStatus.APPROVED), [content])\n  const isCollectionApprovalSection = sectionType === Section.APPROVE\n  const uniqueCollections = useMemo(() => {\n    if (isCollectionApprovalSection) {\n      const collections = content.map((collection) => (collection as CollectionRow).collectionAddress)\n      const uniqueCollections = [...new Set(collections)]\n      return uniqueCollections.length\n    }\n    return undefined\n  }, [content, isCollectionApprovalSection])\n  const removeRow = (row: AssetRow) => {\n    // collections\n    if (isCollectionApprovalSection) {\n      const collectionRow = row as CollectionRow\n      for (const asset of sellAssets)\n        if (asset.asset_contract.address === collectionRow.collectionAddress)\n          removeAssetMarketplace(asset, collectionRow.marketplace)\n    }\n    // listings\n    else {\n      const listingRow = row as ListingRow\n      removeAssetMarketplace(listingRow.asset, listingRow.marketplace)\n    }\n  }\n  return (\n    <Column>\n      <SectionHeader>\n        <Row>\n          {active || allContentApproved ? (\n            <ListingModalWindowActive fill={allContentApproved ? theme.accentSuccess : theme.accentAction} />\n          ) : (\n            <ListingModalWindowClosed />\n          )}\n          <SectionTitle active={active} marginLeft=\"12px\" approved={allContentApproved}>\n            {isCollectionApprovalSection ? (\n              <>\n                <Trans>Approve</Trans>&nbsp;\n                <Plural value={uniqueCollections} _1=\"collection\" other=\"collections\" />\n              </>\n            ) : (\n              <>\n                <Trans>Sign</Trans> &nbsp;{content.length}&nbsp;{' '}\n                <Plural value={content.length} _1=\"listing\" other=\"listings\" />\n              </>\n            )}\n          </SectionTitle>\n        </Row>\n        <SectionArrow\n          active={active}\n          secondaryColor={active ? theme.textPrimary : theme.textSecondary}\n          onClick={toggleSection}\n        />\n      </SectionHeader>\n      {active && (\n        <SectionBody>\n          {isCollectionApprovalSection && (\n            <Row height=\"16px\" marginBottom=\"16px\">\n              <ThemedText.Caption lineHeight=\"16px\" color=\"textSecondary\">\n                <Trans>Why is a transaction required?</Trans>\n              </ThemedText.Caption>\n              <MouseoverTooltip\n                text={<Trans>Listing an NFT requires a one-time marketplace approval for each NFT collection.</Trans>}\n              >\n                <StyledInfoIcon />\n              </MouseoverTooltip>\n            </Row>\n          )}\n          <ContentRowContainer>\n            {content.map((row: AssetRow) => (\n              <ContentRow\n                row={row}\n                key={(row?.name ?? '') + row?.images[1]}\n                removeRow={removeRow}\n                isCollectionApprovalSection={isCollectionApprovalSection}\n              />\n            ))}\n          </ContentRowContainer>\n        </SectionBody>\n      )}\n    </Column>\n  )\n}\n","import { Plural, t, Trans } from '@lingui/macro'\nimport { BaseButton } from 'components/Button'\nimport { BelowFloorWarningModal } from 'nft/components/profile/list/Modal/BelowFloorWarningModal'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { useMemo, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS } from 'theme'\nimport { shallow } from 'zustand/shallow'\n\nimport { findListingIssues } from './utils'\n\nconst StyledListingButton = styled(BaseButton)<{ showResolveIssues: boolean; missingPrices: boolean }>`\n  background: ${({ showResolveIssues, theme }) => (showResolveIssues ? theme.accentFailure : theme.accentAction)};\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 24px;\n  padding: 16px;\n  border-radius: 12px;\n  width: min-content;\n  border: none;\n  cursor: ${({ missingPrices }) => (missingPrices ? 'auto' : 'pointer')};\n  opacity: ${({ showResolveIssues, missingPrices }) => !showResolveIssues && missingPrices && '0.3'};\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    font-size: 16px;\n    line-height: 20px;\n    padding: 10px 12px;\n  }\n`\n\nexport const ListingButton = ({ onClick }: { onClick: () => void }) => {\n  const { sellAssets, showResolveIssues, toggleShowResolveIssues, issues, setIssues } = useSellAsset(\n    ({ sellAssets, showResolveIssues, toggleShowResolveIssues, issues, setIssues }) => ({\n      sellAssets,\n      showResolveIssues,\n      toggleShowResolveIssues,\n      issues,\n      setIssues,\n    }),\n    shallow\n  )\n  const [showWarning, setShowWarning] = useState(false)\n  const isMobile = useIsMobile()\n\n  // Find issues with item listing data\n  const [listingsMissingPrice, listingsBelowFloor] = useMemo(() => {\n    const {\n      missingExpiration,\n      overMaxExpiration,\n      listingsMissingPrice,\n      listingsBelowFloor,\n      listingsAboveSellOrderFloor,\n    } = findListingIssues(sellAssets)\n\n    // set number of issues\n    const foundIssues =\n      Number(missingExpiration) +\n      Number(overMaxExpiration) +\n      listingsMissingPrice.length +\n      listingsAboveSellOrderFloor.length\n    setIssues(foundIssues)\n    !foundIssues && showResolveIssues && toggleShowResolveIssues()\n    // Only show Resolve Issue text if there was a user submitted error (ie not when page loads with no prices set)\n    if ((missingExpiration || overMaxExpiration || listingsAboveSellOrderFloor.length) && !showResolveIssues)\n      toggleShowResolveIssues()\n\n    return [listingsMissingPrice, listingsBelowFloor]\n  }, [sellAssets, setIssues, showResolveIssues, toggleShowResolveIssues])\n\n  const warningWrappedClick = () => {\n    if (issues) !showResolveIssues && toggleShowResolveIssues()\n    else if (listingsBelowFloor.length) setShowWarning(true)\n    else onClick()\n  }\n\n  return (\n    <>\n      <StyledListingButton\n        onClick={warningWrappedClick}\n        missingPrices={!!listingsMissingPrice.length}\n        showResolveIssues={showResolveIssues}\n      >\n        {showResolveIssues ? (\n          <Plural value={issues !== 1 ? 2 : 1} _1=\"Resolve issue\" other={t`Resolve ${issues} issues`} />\n        ) : listingsMissingPrice.length && !isMobile ? (\n          <Trans>Set prices to continue</Trans>\n        ) : (\n          <Trans>Start listing</Trans>\n        )}\n      </StyledListingButton>\n\n      {showWarning && (\n        <BelowFloorWarningModal\n          listingsBelowFloor={listingsBelowFloor}\n          closeModal={() => setShowWarning(false)}\n          startListing={onClick}\n        />\n      )}\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport Column from 'components/Column'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport Row from 'components/Row'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { AssetRow, CollectionRow, ListingStatus } from 'nft/types'\nimport { useEffect, useRef } from 'react'\nimport { Check, XOctagon } from 'react-feather'\nimport styled, { css, useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { opacify } from 'theme/utils'\n\nconst ContentColumn = styled(Column)<{ failed: boolean }>`\n  background-color: ${({ theme, failed }) => failed && opacify(12, theme.accentCritical)};\n  border-radius: 12px;\n  padding-bottom: ${({ failed }) => failed && '16px'};\n`\n\nconst ContentRowWrapper = styled(Row)<{ active: boolean; failed: boolean }>`\n  padding: 16px;\n  border: ${({ failed, theme }) => !failed && `1px solid ${theme.backgroundOutline}`};\n  border-radius: 12px;\n  opacity: ${({ active, failed }) => (active || failed ? '1' : '0.6')};\n`\n\nconst CollectionIcon = styled.img`\n  border-radius: 100px;\n  height: 24px;\n  width: 24px;\n  z-index: 1;\n`\n\nconst AssetIcon = styled.img`\n  border-radius: 4px;\n  height: 24px;\n  width: 24px;\n  z-index: 1;\n`\n\nconst MarketplaceIcon = styled.img`\n  border-radius: 4px;\n  height: 24px;\n  width: 24px;\n  margin-left: -4px;\n  margin-right: 12px;\n`\n\nconst ContentName = styled(ThemedText.SubHeaderSmall)`\n  color: ${({ theme }) => theme.textPrimary};\n  line-height: 20px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  max-width: 40%;\n`\n\nconst ProceedText = styled.span`\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 16px;\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nconst FailedText = styled.span`\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n  color: ${({ theme }) => theme.accentCritical};\n  margin-left: 4px;\n`\n\nconst StyledVerifiedIcon = styled(VerifiedIcon)`\n  height: 16px;\n  width: 16px;\n  margin-left: 4px;\n`\n\nconst IconWrapper = styled.div`\n  margin-left: auto;\n  margin-right: 0px;\n`\n\nconst ButtonRow = styled(Row)`\n  padding: 0px 16px;\n  justify-content: space-between;\n`\n\nconst failedButtonStyle = css`\n  width: 152px;\n  cursor: pointer;\n  padding: 8px 0px;\n  text-align: center;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n  border-radius: 12px;\n  border: none;\n\n  &:hover {\n    opacity: 0.6;\n  }\n`\n\nconst RemoveButton = styled.button`\n  background-color: ${({ theme }) => theme.accentCritical};\n  color: ${({ theme }) => theme.accentTextDarkPrimary};\n  ${failedButtonStyle}\n`\n\nconst RetryButton = styled.button`\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  color: ${({ theme }) => theme.textPrimary};\n  ${failedButtonStyle}\n`\n\nexport const ContentRow = ({\n  row,\n  isCollectionApprovalSection,\n  removeRow,\n}: {\n  row: AssetRow\n  isCollectionApprovalSection: boolean\n  removeRow: (row: AssetRow) => void\n}) => {\n  const theme = useTheme()\n  const rowRef = useRef<HTMLDivElement>()\n  const failed = row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED\n\n  useEffect(() => {\n    row.status === ListingStatus.SIGNING && rowRef.current?.scroll\n  }, [row.status])\n\n  return (\n    <ContentColumn failed={failed}>\n      <ContentRowWrapper\n        active={row.status === ListingStatus.SIGNING || row.status === ListingStatus.APPROVED}\n        failed={failed}\n        ref={rowRef}\n      >\n        {isCollectionApprovalSection ? <CollectionIcon src={row.images[0]} /> : <AssetIcon src={row.images[0]} />}\n        <MarketplaceIcon src={row.images[1]} />\n        <ContentName>{row.name}</ContentName>\n        {isCollectionApprovalSection && (row as CollectionRow).isVerified && <StyledVerifiedIcon />}\n        <IconWrapper>\n          {row.status === ListingStatus.DEFINED || row.status === ListingStatus.PENDING ? (\n            <Loader\n              height=\"14px\"\n              width=\"14px\"\n              stroke={row.status === ListingStatus.PENDING ? theme.accentAction : theme.textTertiary}\n            />\n          ) : row.status === ListingStatus.SIGNING ? (\n            <ProceedText>\n              <Trans>Proceed in wallet</Trans>\n            </ProceedText>\n          ) : row.status === ListingStatus.APPROVED ? (\n            <Check height=\"20\" width=\"20\" stroke={theme.accentSuccess} />\n          ) : (\n            failed && (\n              <Row>\n                <XOctagon height=\"20\" width=\"20\" color={theme.accentCritical} />\n                <FailedText>\n                  {row.status === ListingStatus.FAILED ? <Trans>Failed</Trans> : <Trans>Rejected</Trans>}\n                </FailedText>\n              </Row>\n            )\n          )}\n        </IconWrapper>\n      </ContentRowWrapper>\n      {failed && (\n        <ButtonRow justify=\"space-between\">\n          <RemoveButton onClick={() => removeRow(row)}>\n            <Trans>Remove</Trans>\n          </RemoveButton>\n          <RetryButton onClick={row.callback}>\n            <Trans>Retry</Trans>\n          </RetryButton>\n        </ButtonRow>\n      )}\n    </ContentColumn>\n  )\n}\n","import { Plural } from '@lingui/macro'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport ms from 'ms.macro'\nimport { Column, Row } from 'nft/components/Flex'\nimport { NumericInput } from 'nft/components/layout/Input'\nimport { body, caption } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { DropDownOption } from 'nft/types'\nimport { useEffect, useMemo, useReducer, useRef, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\n\nimport { Dropdown } from './Dropdown'\n\nconst ModalWrapper = styled(Column)`\n  gap: 4px;\n  position: relative;\n`\n\nconst InputWrapper = styled(Row)<{ isInvalid: boolean }>`\n  padding: 6px 6px 6px 12px;\n  border: 1px solid;\n  position: relative;\n  height: 44px;\n  border-radius: 8px;\n  border-color: ${({ isInvalid, theme }) => (isInvalid ? theme.accentCritical : theme.backgroundOutline)};\n  width: 160px;\n  justify-content: space-between;\n`\n\nconst DropdownPrompt = styled(Row)`\n  gap: 4px;\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n  border-radius: 8px;\n  padding: 6px 4px 6px 8px;\n  white-space: nowrap;\n  color: ${({ theme }) => theme.textPrimary};\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst DropdownChevron = styled(ChevronDown)<{ isOpen: boolean }>`\n  height: 20px;\n  width: 20px;\n  color: ${({ theme }) => theme.textSecondary};\n  transform: ${({ isOpen }) => isOpen && 'rotate(180deg)'};\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `transform ${duration.fast} ${timing.ease}`};\n`\n\nconst DropdownContainer = styled.div`\n  position: absolute;\n  top: 48px;\n  right: 0px;\n  z-index: ${Z_INDEX.dropdown};\n`\n\nconst ErrorMessage = styled(Row)`\n  color: ${({ theme }) => theme.accentCritical};\n  gap: 4px;\n  position: absolute;\n  top: 44px;\n  white-space: nowrap;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 16px;\n  color: ${({ theme }) => theme.accentCritical};\n`\n\nenum Duration {\n  hour = 'hour',\n  day = 'day',\n  week = 'week',\n  month = 'month',\n}\n\nenum ErrorState {\n  valid,\n  empty,\n  overMax,\n}\n\nexport const SetDurationModal = () => {\n  const [duration, setDuration] = useState(Duration.day)\n  const [amount, setAmount] = useState('7')\n  const [errorState, setErrorState] = useState(ErrorState.valid)\n  const setGlobalExpiration = useSellAsset((state) => state.setGlobalExpiration)\n  const [showDropdown, toggleShowDropdown] = useReducer((s) => !s, false)\n  const durationDropdownRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(durationDropdownRef, showDropdown ? toggleShowDropdown : undefined)\n\n  const setCustomExpiration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(event.target.value.length ? event.target.value : '')\n  }\n\n  const durationOptions: DropDownOption[] = useMemo(\n    () => [\n      {\n        displayText: 'hours',\n        isSelected: duration === Duration.hour,\n        onClick: () => {\n          setDuration(Duration.hour)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'days',\n        isSelected: duration === Duration.day,\n        onClick: () => {\n          setDuration(Duration.day)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'weeks',\n        isSelected: duration === Duration.week,\n        onClick: () => {\n          setDuration(Duration.week)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'months',\n        isSelected: duration === Duration.month,\n        onClick: () => {\n          setDuration(Duration.month)\n          toggleShowDropdown()\n        },\n      },\n    ],\n    [duration]\n  )\n\n  let prompt\n  switch (duration) {\n    case Duration.hour:\n      prompt = <Plural value={amount} _1=\"hour\" other=\"hours\" />\n      break\n    case Duration.day:\n      prompt = <Plural value={amount} _1=\"day\" other=\"days\" />\n      break\n    case Duration.week:\n      prompt = <Plural value={amount} _1=\"week\" other=\"weeks\" />\n      break\n    case Duration.month:\n      prompt = <Plural value={amount} _1=\"month\" other=\"months\" />\n      break\n    default:\n      break\n  }\n\n  useEffect(() => {\n    const expiration = convertDurationToExpiration(parseFloat(amount), duration)\n\n    if (expiration * 1000 - Date.now() < ms`60 seconds` || isNaN(expiration)) setErrorState(ErrorState.empty)\n    else if (expiration * 1000 - Date.now() > ms`180 days`) setErrorState(ErrorState.overMax)\n    else setErrorState(ErrorState.valid)\n    setGlobalExpiration(expiration)\n  }, [amount, duration, setGlobalExpiration])\n\n  return (\n    <ModalWrapper ref={durationDropdownRef}>\n      <InputWrapper isInvalid={errorState !== ErrorState.valid}>\n        <NumericInput\n          as=\"input\"\n          type=\"number\"\n          pattern=\"[0-9]\"\n          borderStyle=\"none\"\n          className={body}\n          color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\n          value={amount}\n          width=\"40\"\n          marginRight=\"4\"\n          backgroundColor=\"none\"\n          onChange={setCustomExpiration}\n          flexShrink=\"0\"\n        />\n        <DropdownPrompt onClick={toggleShowDropdown}>\n          {prompt} <DropdownChevron isOpen={showDropdown} />\n        </DropdownPrompt>\n        {showDropdown && (\n          <DropdownContainer>\n            <Dropdown dropDownOptions={durationOptions} width={125} />\n          </DropdownContainer>\n        )}\n      </InputWrapper>\n      {errorState !== ErrorState.valid && (\n        <ErrorMessage className={caption}>\n          {' '}\n          <WarningIcon /> {errorState === ErrorState.overMax ? 'Maximum 6 months' : 'Set duration'}\n        </ErrorMessage>\n      )}\n    </ModalWrapper>\n  )\n}\n\nconst convertDurationToExpiration = (amount: number, duration: Duration) => {\n  const durationFactor = () => {\n    switch (duration) {\n      case Duration.hour:\n        return 1\n      case Duration.day:\n        return 24\n      case Duration.week:\n        return 24 * 7\n      default: // month\n        return 24 * 30\n    }\n  }\n  return Math.round((Date.now() + ms`1 hour` * durationFactor() * amount) / 1000)\n}\n","import { Trans } from '@lingui/macro'\nimport { formatCurrencyAmount, NumberType } from '@uniswap/conedison/format'\nimport Column from 'components/Column'\nimport { ScrollBarStyles } from 'components/Common'\nimport Row from 'components/Row'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { getTotalEthValue } from 'nft/components/profile/list/utils'\nimport { useSellAsset } from 'nft/hooks'\nimport { formatEth, generateTweetForList, pluralize } from 'nft/utils'\nimport { useMemo } from 'react'\nimport { Twitter, X } from 'react-feather'\nimport styled, { css, useTheme } from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\n\nimport { TitleRow } from '../shared'\n\nconst SuccessImage = styled.img<{ numImages: number }>`\n  width: calc(${({ numImages }) => (numImages > 1 ? (numImages > 2 ? '33%' : '50%') : '100%')} - 12px);\n  border-radius: 12px;\n`\n\nconst SuccessImageWrapper = styled(Row)`\n  flex-wrap: wrap;\n  gap: 12px;\n  justify-content: center;\n  overflow-y: scroll;\n  margin-bottom: 16px;\n  ${ScrollBarStyles}\n`\n\nconst ProceedsColumn = styled(Column)`\n  text-align: right;\n`\n\nconst buttonStyle = css`\n  width: 182px;\n  cursor: pointer;\n  padding: 12px 0px;\n  text-align: center;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 20px;\n  border-radius: 12px;\n  border: none;\n\n  &:hover {\n    opacity: 0.6;\n  }\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: 100%;\n    margin-bottom: 8px;\n  }\n`\n\nconst ReturnButton = styled.button`\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  color: ${({ theme }) => theme.textPrimary};\n  ${buttonStyle}\n`\n\nconst TweetButton = styled.a`\n  background-color: ${({ theme }) => theme.accentAction};\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  text-decoration: none;\n  ${buttonStyle}\n`\n\nconst TweetRow = styled(Row)`\n  justify-content: center;\n  gap: 4px;\n`\n\nexport const SuccessScreen = ({ overlayClick }: { overlayClick: () => void }) => {\n  const theme = useTheme()\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const nativeCurrency = useNativeCurrency()\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\n  const usdcValue = useStablecoinValue(parsedAmount)\n\n  return (\n    <>\n      <TitleRow>\n        <ThemedText.HeadlineSmall lineHeight=\"28px\">\n          <Trans>Successfully listed</Trans>&nbsp;{sellAssets.length > 1 ? ` ${sellAssets.length} ` : ''}\n          NFT{pluralize(sellAssets.length)}!\n        </ThemedText.HeadlineSmall>\n        <X size={24} cursor=\"pointer\" onClick={overlayClick} />\n      </TitleRow>\n      <SuccessImageWrapper>\n        {sellAssets.map((asset) => (\n          <SuccessImage\n            src={asset.imageUrl}\n            key={asset?.asset_contract?.address ?? '' + asset?.tokenId}\n            numImages={sellAssets.length}\n          />\n        ))}\n      </SuccessImageWrapper>\n      <Row justify=\"space-between\" align=\"flex-start\" marginBottom=\"16px\">\n        <ThemedText.SubHeader lineHeight=\"24px\">\n          <Trans>Proceeds if sold</Trans>\n        </ThemedText.SubHeader>\n        <ProceedsColumn>\n          <ThemedText.SubHeader lineHeight=\"24px\">{formatEth(totalEthListingValue)} ETH</ThemedText.SubHeader>\n          {usdcValue && (\n            <ThemedText.BodySmall lineHeight=\"20px\" color=\"textSecondary\">\n              {formatCurrencyAmount(usdcValue, NumberType.FiatTokenPrice)}\n            </ThemedText.BodySmall>\n          )}\n        </ProceedsColumn>\n      </Row>\n      <Row justify=\"space-between\" flexWrap=\"wrap\">\n        <ReturnButton onClick={() => window.location.reload()}>\n          <Trans>Return to My NFTs</Trans>\n        </ReturnButton>\n        <TweetButton href={generateTweetForList(sellAssets)} target=\"_blank\" rel=\"noreferrer\">\n          <TweetRow>\n            <Twitter height={20} width={20} color={theme.accentTextLightPrimary} fill={theme.accentTextLightPrimary} />\n            <Trans>Share on Twitter</Trans>\n          </TweetRow>\n        </TweetButton>\n      </Row>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, Trace, useTrace } from '@uniswap/analytics'\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\nimport { formatCurrencyAmount, NumberType } from '@uniswap/conedison/format'\nimport { useWeb3React } from '@web3-react/core'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { getTotalEthValue, signListingRow } from 'nft/components/profile/list/utils'\nimport { useNFTList, useSellAsset } from 'nft/hooks'\nimport { ListingStatus } from 'nft/types'\nimport { useCallback, useEffect, useMemo, useReducer } from 'react'\nimport { X } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport { TitleRow } from '../shared'\nimport { ListModalSection, Section } from './ListModalSection'\nimport { SuccessScreen } from './SuccessScreen'\n\nconst ListModalWrapper = styled.div`\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 420px;\n  z-index: ${Z_INDEX.modal};\n  background: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 20px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  padding: 20px 24px 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: 100%;\n    height: 100%;\n  }\n`\n\nexport const ListModal = ({ overlayClick }: { overlayClick: () => void }) => {\n  const { provider } = useWeb3React()\n  const signer = provider?.getSigner()\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const { setListingStatusAndCallback, setLooksRareNonce, getLooksRareNonce, collectionsRequiringApproval, listings } =\n    useNFTList(\n      ({\n        setListingStatusAndCallback,\n        setLooksRareNonce,\n        getLooksRareNonce,\n        collectionsRequiringApproval,\n        listings,\n      }) => ({\n        setListingStatusAndCallback,\n        setLooksRareNonce,\n        getLooksRareNonce,\n        collectionsRequiringApproval,\n        listings,\n      }),\n      shallow\n    )\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n  const [openSection, toggleOpenSection] = useReducer(\n    (s) => (s === Section.APPROVE ? Section.SIGN : Section.APPROVE),\n    Section.APPROVE\n  )\n  const nativeCurrency = useNativeCurrency()\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\n  const usdcValue = useStablecoinValue(parsedAmount)\n  const usdcAmount = formatCurrencyAmount(usdcValue, NumberType.FiatTokenPrice)\n\n  const allCollectionsApproved = useMemo(\n    () => collectionsRequiringApproval.every((collection) => collection.status === ListingStatus.APPROVED),\n    [collectionsRequiringApproval]\n  )\n\n  const allListingsApproved = useMemo(\n    () => listings.every((listing) => listing.status === ListingStatus.APPROVED),\n    [listings]\n  )\n\n  const signListings = async () => {\n    if (!signer || !provider) return\n    // sign listings\n    for (const listing of listings) {\n      await signListingRow(listing, signer, provider, getLooksRareNonce, setLooksRareNonce, setListingStatusAndCallback)\n    }\n\n    sendAnalyticsEvent(NFTEventName.NFT_LISTING_COMPLETED, {\n      signatures_approved: listings.filter((asset) => asset.status === ListingStatus.APPROVED),\n      list_quantity: listings.length,\n      usd_value: usdcAmount,\n      ...trace,\n    })\n  }\n\n  // Once all collections have been approved, go to next section and start signing listings\n  useEffect(() => {\n    if (allCollectionsApproved) {\n      signListings()\n      openSection === Section.APPROVE && toggleOpenSection()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allCollectionsApproved])\n\n  const closeModalOnClick = useCallback(() => {\n    allListingsApproved ? window.location.reload() : overlayClick()\n  }, [allListingsApproved, overlayClick])\n\n  // In the case that a user removes all listings via retry logic, close modal\n  useEffect(() => {\n    !listings.length && closeModalOnClick()\n  }, [listings, closeModalOnClick])\n\n  return (\n    <Portal>\n      <Trace modal={InterfaceModalName.NFT_LISTING}>\n        <ListModalWrapper>\n          {allListingsApproved ? (\n            <SuccessScreen overlayClick={closeModalOnClick} />\n          ) : (\n            <>\n              <TitleRow>\n                <ThemedText.HeadlineSmall lineHeight=\"28px\">\n                  <Trans>List NFTs</Trans>\n                </ThemedText.HeadlineSmall>\n                <X size={24} cursor=\"pointer\" onClick={closeModalOnClick} />\n              </TitleRow>\n              <ListModalSection\n                sectionType={Section.APPROVE}\n                active={openSection === Section.APPROVE}\n                content={collectionsRequiringApproval}\n                toggleSection={toggleOpenSection}\n              />\n              <ListModalSection\n                sectionType={Section.SIGN}\n                active={openSection === Section.SIGN}\n                content={listings}\n                toggleSection={toggleOpenSection}\n              />\n            </>\n          )}\n        </ListModalWrapper>\n      </Trace>\n      <Overlay onClick={closeModalOnClick} />\n    </Portal>\n  )\n}\n","import Column from 'components/Column'\nimport Row from 'components/Row'\nimport { DropDownOption } from 'nft/types'\nimport { Check } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nconst DropdownWrapper = styled(Column)<{ $width: number }>`\n  gap: 4px;\n  background: ${({ theme }) => theme.backgroundSurface};\n  padding: 8px;\n  width: ${({ $width }) => $width}px;\n  border-radius: 12px;\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n`\n\nconst DropdownRow = styled(Row)`\n  justify-content: space-between;\n  padding: 8px;\n  cursor: pointer;\n  border-radius: 12px;\n\n  &:hover {\n    background: ${({ theme }) => theme.backgroundInteractive};\n  }\n`\n\ninterface DropdownArgs {\n  dropDownOptions: DropDownOption[]\n  width: number\n}\n\nexport const Dropdown = ({ dropDownOptions, width }: DropdownArgs) => {\n  const theme = useTheme()\n  return (\n    <DropdownWrapper $width={width}>\n      {dropDownOptions.map((option) => (\n        <DropdownRow key={option.displayText} onClick={option.onClick}>\n          <ThemedText.BodyPrimary lineHeight=\"24px\">{option.displayText}</ThemedText.BodyPrimary>\n          {option.isSelected && <Check height={20} width={20} color={theme.accentAction} />}\n        </DropdownRow>\n      ))}\n    </DropdownWrapper>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport Column from 'components/Column'\nimport Row from 'components/Row'\nimport { BrokenLinkIcon } from 'nft/components/icons'\nimport { NumericInput } from 'nft/components/layout/Input'\nimport { useUpdateInputAndWarnings } from 'nft/components/profile/list/utils'\nimport { body } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { formatEth } from 'nft/utils/currency'\nimport { Dispatch, useRef, useState } from 'react'\nimport { AlertTriangle, Link } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { BREAKPOINTS } from 'theme'\nimport { colors } from 'theme/colors'\n\nimport { WarningType } from './shared'\n\nconst PriceTextInputWrapper = styled(Column)`\n  gap: 12px;\n  position: relative;\n`\n\nconst InputWrapper = styled(Row)<{ borderColor: string }>`\n  height: 48px;\n  color: ${({ theme }) => theme.textTertiary};\n  padding: 12px;\n  border: 2px solid;\n  border-radius: 8px;\n  border-color: ${({ borderColor }) => borderColor};\n  margin-right: auto;\n  box-sizing: border-box;\n`\n\nconst CurrencyWrapper = styled.div<{ listPrice: number | undefined }>`\n  color: ${({ listPrice, theme }) => (listPrice ? theme.textPrimary : theme.textSecondary)};\n`\n\nconst GlobalPriceIcon = styled.div`\n  display: flex;\n  cursor: pointer;\n  position: absolute;\n  bottom: 32px;\n  right: -10px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 50%;\n  height: 28px;\n  width: 28px;\n  align-items: center;\n  justify-content: center;\n`\n\nconst WarningRow = styled(Row)`\n  gap: 4px;\n`\n\nconst WarningMessage = styled(Row)<{ $color: string }>`\n  top: 52px;\n  width: max-content;\n  position: absolute;\n  right: 0;\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n  color: ${({ $color }) => $color};\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    right: unset;\n  }\n`\n\nconst WarningAction = styled.div`\n  cursor: pointer;\n  color: ${({ theme }) => theme.accentAction};\n`\n\nconst getWarningMessage = (warning: WarningType) => {\n  let message = <></>\n  switch (warning) {\n    case WarningType.BELOW_FLOOR:\n      message = <Trans>below floor price.</Trans>\n      break\n    case WarningType.ALREADY_LISTED:\n      message = <Trans>Already listed at</Trans>\n      break\n  }\n  return message\n}\n\ninterface PriceTextInputProps {\n  listPrice?: number\n  setListPrice: Dispatch<number | undefined>\n  isGlobalPrice: boolean\n  setGlobalOverride: Dispatch<boolean>\n  globalOverride: boolean\n  asset: WalletAsset\n}\n\nexport const PriceTextInput = ({\n  listPrice,\n  setListPrice,\n  isGlobalPrice,\n  setGlobalOverride,\n  globalOverride,\n  asset,\n}: PriceTextInputProps) => {\n  const [warningType, setWarningType] = useState(WarningType.NONE)\n  const removeSellAsset = useSellAsset((state) => state.removeSellAsset)\n  const showResolveIssues = useSellAsset((state) => state.showResolveIssues)\n  const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>\n  const theme = useTheme()\n\n  const percentBelowFloor = (1 - (listPrice ?? 0) / (asset.floorPrice ?? 0)) * 100\n  const warningColor =\n    (showResolveIssues && !listPrice) ||\n    warningType === WarningType.ALREADY_LISTED ||\n    (warningType === WarningType.BELOW_FLOOR && percentBelowFloor >= 20)\n      ? colors.red400\n      : warningType === WarningType.BELOW_FLOOR\n      ? theme.accentWarning\n      : isGlobalPrice || !!listPrice\n      ? theme.accentAction\n      : theme.textSecondary\n\n  const setPrice = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!listPrice && event.target.value.includes('.') && parseFloat(event.target.value) === 0) {\n      return\n    }\n    const val = parseFloat(event.target.value)\n    setListPrice(isNaN(val) ? undefined : val)\n  }\n\n  useUpdateInputAndWarnings(setWarningType, inputRef, asset, listPrice)\n\n  return (\n    <PriceTextInputWrapper>\n      <InputWrapper borderColor={warningColor}>\n        <NumericInput\n          as=\"input\"\n          pattern=\"[0-9]\"\n          borderStyle=\"none\"\n          className={body}\n          color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\n          placeholder=\"0\"\n          backgroundColor=\"none\"\n          width={{ sm: '54', md: '68' }}\n          ref={inputRef}\n          onChange={setPrice}\n        />\n        <CurrencyWrapper listPrice={listPrice}>&nbsp;ETH</CurrencyWrapper>\n        {(isGlobalPrice || globalOverride) && (\n          <GlobalPriceIcon onClick={() => setGlobalOverride(!globalOverride)}>\n            {globalOverride ? <BrokenLinkIcon /> : <Link size={20} color={warningColor} />}\n          </GlobalPriceIcon>\n        )}\n      </InputWrapper>\n      <WarningMessage $color={warningColor}>\n        {warningType !== WarningType.NONE && (\n          <WarningRow>\n            <AlertTriangle height={16} width={16} color={warningColor} />\n            <span>\n              {warningType === WarningType.BELOW_FLOOR && `${percentBelowFloor.toFixed(0)}% `}\n              {getWarningMessage(warningType)}\n              &nbsp;\n              {warningType === WarningType.ALREADY_LISTED && `${formatEth(asset?.floor_sell_order_price ?? 0)} ETH`}\n            </span>\n            <WarningAction\n              onClick={() => {\n                warningType === WarningType.ALREADY_LISTED && removeSellAsset(asset)\n                setWarningType(WarningType.NONE)\n              }}\n            >\n              {warningType === WarningType.BELOW_FLOOR ? <Trans>Dismiss</Trans> : <Trans>Remove item</Trans>}\n            </WarningAction>\n          </WarningRow>\n        )}\n      </WarningMessage>\n    </PriceTextInputWrapper>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport Column from 'components/Column'\nimport Row from 'components/Row'\nimport { getMarketplaceFee, getRoyalty } from 'nft/components/profile/list/utils'\nimport { ListingMarket, WalletAsset } from 'nft/types'\nimport { formatEth } from 'nft/utils'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nconst FeeWrap = styled(Row)`\n  margin-bottom: 4px;\n  justify-content: space-between;\n`\n\nconst RoyaltyContainer = styled(Column)`\n  gap: 12px;\n  padding: 4px 0px;\n`\n\nconst MarketIcon = styled.img`\n  width: 16px;\n  height: 16px;\n  border-radius: 2px;\n  object-fit: cover;\n  outline: 1px solid ${({ theme }) => theme.backgroundInteractive};\n  margin-right: 8px;\n`\n\nconst CollectionIcon = styled(MarketIcon)`\n  border-radius: 50%;\n`\n\nconst FeePercent = styled(ThemedText.Caption)`\n  line-height: 16px;\n  color: ${({ theme }) => theme.textSecondary};\n  white-space: nowrap;\n`\n\nconst MaxFeeContainer = styled(Row)`\n  justify-content: space-between;\n  padding-top: 12px;\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n`\n\nexport const RoyaltyTooltip = ({\n  selectedMarkets,\n  asset,\n  fees,\n}: {\n  selectedMarkets: ListingMarket[]\n  asset: WalletAsset\n  fees?: number\n}) => {\n  const maxRoyalty = Math.max(...selectedMarkets.map((market) => getRoyalty(market, asset) ?? 0)).toFixed(2)\n  return (\n    <RoyaltyContainer>\n      {selectedMarkets.map((market) => (\n        <FeeWrap key={asset.collection?.address ?? '' + asset.tokenId + market.name + 'fee'}>\n          <Row>\n            <MarketIcon src={market.icon} />\n            <ThemedText.Caption lineHeight=\"16px\" marginRight=\"12px\">\n              {market.name}&nbsp;\n              <Trans>fee</Trans>\n            </ThemedText.Caption>\n          </Row>\n          <FeePercent>{getMarketplaceFee(market, asset)}%</FeePercent>\n        </FeeWrap>\n      ))}\n      <FeeWrap>\n        <Row>\n          <CollectionIcon src={asset.collection?.imageUrl} />\n          <ThemedText.Caption lineHeight=\"16px\" marginRight=\"12px\">\n            <Trans>Max creator royalties</Trans>\n          </ThemedText.Caption>\n        </Row>\n        <FeePercent>{maxRoyalty}%</FeePercent>\n      </FeeWrap>\n      <MaxFeeContainer>\n        <ThemedText.Caption lineHeight=\"16px\">\n          <Trans>Max fees</Trans>\n        </ThemedText.Caption>\n        <ThemedText.Caption lineHeight=\"16px\" color={fees ? 'textPrimary' : 'textSecondary'}>\n          {fees ? formatEth(fees) : '-'} ETH\n        </ThemedText.Caption>\n      </MaxFeeContainer>\n    </RoyaltyContainer>\n  )\n}\n","// eslint-disable-next-line no-restricted-imports\nimport { t } from '@lingui/macro'\nimport Column from 'components/Column'\nimport Row from 'components/Row'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { RowsCollpsedIcon, RowsExpandedIcon } from 'nft/components/icons'\nimport {\n  getMarketplaceFee,\n  getRoyalty,\n  useHandleGlobalPriceToggle,\n  useSyncPriceWithGlobalMethod,\n} from 'nft/components/profile/list/utils'\nimport { useSellAsset } from 'nft/hooks'\nimport { ListingMarket, WalletAsset } from 'nft/types'\nimport { formatEth, formatUsdPrice } from 'nft/utils/currency'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { Dispatch, DispatchWithoutAction, useCallback, useEffect, useMemo, useReducer, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\n\nimport { PriceTextInput } from './PriceTextInput'\nimport { RoyaltyTooltip } from './RoyaltyTooltip'\nimport { RemoveIconWrap, SetPriceMethod } from './shared'\n\nconst LastPriceInfo = styled(Column)`\n  text-align: left;\n  display: none;\n  flex: 1;\n\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\n    display: flex;\n  }\n`\n\nconst FloorPriceInfo = styled(Column)`\n  text-align: left;\n  display: none;\n  flex: 1;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\nconst RemoveMarketplaceWrap = styled(RemoveIconWrap)`\n  top: 8px;\n  left: 16px;\n  z-index: 3;\n`\n\nconst MarketIconsWrapper = styled(Row)`\n  position: relative;\n  margin-right: 12px;\n  width: 44px;\n  justify-content: flex-end;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: none;\n  }\n`\n\nconst MarketIconWrapper = styled(Column)`\n  position: relative;\n  cursor: pointer;\n`\n\nconst MarketIcon = styled.img<{ index: number }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  object-fit: cover;\n  z-index: ${({ index }) => 2 - index};\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -8}px`};\n  outline: 1px solid ${({ theme }) => theme.backgroundInteractive};\n`\n\nconst ExpandMarketIconWrapper = styled.div`\n  cursor: pointer;\n  margin-left: 4px;\n  height: 28px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: none;\n  }\n`\n\nconst FeeColumnWrapper = styled(Column)`\n  flex: 1;\n  align-items: flex-end;\n  display: none;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\nconst FeeWrapper = styled.div`\n  width: min-content;\n  white-space: nowrap;\n`\n\nconst ReturnColumn = styled(Column)`\n  flex: 1.5;\n  display: none;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\ninterface MarketplaceRowProps {\n  globalPriceMethod?: SetPriceMethod\n  globalPrice?: number\n  setGlobalPrice: Dispatch<number | undefined>\n  selectedMarkets: ListingMarket[]\n  removeMarket?: () => void\n  asset: WalletAsset\n  expandMarketplaceRows?: boolean\n  rowHovered?: boolean\n  toggleExpandMarketplaceRows: DispatchWithoutAction\n}\n\nexport const MarketplaceRow = ({\n  globalPriceMethod,\n  globalPrice,\n  setGlobalPrice,\n  selectedMarkets,\n  removeMarket = undefined,\n  asset,\n  expandMarketplaceRows,\n  toggleExpandMarketplaceRows,\n  rowHovered,\n}: MarketplaceRowProps) => {\n  const setAssetListPrice = useSellAsset((state) => state.setAssetListPrice)\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\n  const [marketIconHovered, toggleMarketIconHovered] = useReducer((s) => !s, false)\n  const [marketRowHovered, toggleMarketRowHovered] = useReducer((s) => !s, false)\n  const [listPrice, setListPrice] = useState<number | undefined>(\n    () =>\n      asset.newListings?.find((listing) =>\n        expandMarketplaceRows ? listing.marketplace.name === selectedMarkets?.[0].name : !!listing.price\n      )?.price\n  )\n  const [globalOverride, setGlobalOverride] = useState(false)\n\n  const showGlobalPrice = globalPriceMethod === SetPriceMethod.SAME_PRICE && !globalOverride\n  const price = showGlobalPrice ? globalPrice : listPrice\n  const setPrice = useCallback(\n    (price?: number) => {\n      showGlobalPrice ? setGlobalPrice(price) : setListPrice(price)\n      for (const marketplace of selectedMarkets) setAssetListPrice(asset, price, marketplace)\n    },\n    [asset, selectedMarkets, setAssetListPrice, setGlobalPrice, showGlobalPrice]\n  )\n\n  const fees = useMemo(() => {\n    if (selectedMarkets.length === 1) {\n      return getRoyalty(selectedMarkets[0], asset) + getMarketplaceFee(selectedMarkets[0], asset)\n    } else {\n      let max = 0\n      for (const selectedMarket of selectedMarkets) {\n        const fee = getRoyalty(selectedMarket, asset) + getMarketplaceFee(selectedMarket, asset)\n        max = Math.max(fee, max)\n      }\n\n      return max\n    }\n  }, [asset, selectedMarkets])\n\n  const feeInEth = price && (price * fees) / 100\n  const userReceives = price && feeInEth && price - feeInEth\n\n  useHandleGlobalPriceToggle(globalOverride, setListPrice, setPrice, listPrice, globalPrice)\n  useSyncPriceWithGlobalMethod(\n    asset,\n    setListPrice,\n    setGlobalPrice,\n    setGlobalOverride,\n    listPrice,\n    globalPrice,\n    globalPriceMethod\n  )\n\n  // When in Same Price Mode and not overriding, update local price when global price changes\n  useEffect(() => {\n    if (showGlobalPrice) {\n      setPrice(globalPrice)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalPrice])\n\n  return (\n    <Row onMouseEnter={toggleMarketRowHovered} onMouseLeave={toggleMarketRowHovered}>\n      <FloorPriceInfo>\n        <ThemedText.BodyPrimary color=\"textSecondary\" lineHeight=\"24px\">\n          {asset.floorPrice ? `${asset.floorPrice.toFixed(3)} ETH` : '-'}\n        </ThemedText.BodyPrimary>\n      </FloorPriceInfo>\n      <LastPriceInfo>\n        <ThemedText.BodyPrimary color=\"textSecondary\" lineHeight=\"24px\">\n          {asset.lastPrice ? `${asset.lastPrice.toFixed(3)} ETH` : '-'}\n        </ThemedText.BodyPrimary>\n      </LastPriceInfo>\n\n      <Row flex=\"2\">\n        {(expandMarketplaceRows || selectedMarkets.length > 1) && (\n          <MarketIconsWrapper onMouseEnter={toggleMarketIconHovered} onMouseLeave={toggleMarketIconHovered}>\n            {selectedMarkets.map((market, index) => (\n              <MarketIconWrapper\n                key={market.name + asset.collection?.address + asset.tokenId}\n                onClick={(e) => {\n                  e.stopPropagation()\n                  removeAssetMarketplace(asset, market)\n                  removeMarket && removeMarket()\n                }}\n              >\n                <MarketIcon alt={market.name} src={market.icon} index={index} />\n                <RemoveMarketplaceWrap hovered={marketIconHovered && (expandMarketplaceRows ?? false)}>\n                  <img width=\"20px\" src=\"/nft/svgs/minusCircle.svg\" alt=\"Remove item\" />\n                </RemoveMarketplaceWrap>\n              </MarketIconWrapper>\n            ))}\n          </MarketIconsWrapper>\n        )}\n        <PriceTextInput\n          listPrice={price}\n          setListPrice={setPrice}\n          isGlobalPrice={showGlobalPrice}\n          setGlobalOverride={setGlobalOverride}\n          globalOverride={globalOverride}\n          asset={asset}\n        />\n        {rowHovered && ((expandMarketplaceRows && marketRowHovered) || selectedMarkets.length > 1) && (\n          <ExpandMarketIconWrapper onClick={toggleExpandMarketplaceRows}>\n            {expandMarketplaceRows ? <RowsExpandedIcon /> : <RowsCollpsedIcon />}\n          </ExpandMarketIconWrapper>\n        )}\n      </Row>\n\n      <FeeColumnWrapper>\n        <MouseoverTooltip\n          text={<RoyaltyTooltip selectedMarkets={selectedMarkets} asset={asset} fees={feeInEth} />}\n          placement=\"left\"\n        >\n          <FeeWrapper>\n            <ThemedText.BodyPrimary color=\"textSecondary\">\n              {fees > 0 ? `${fees.toFixed(2)}${selectedMarkets.length > 1 ? t`% max` : '%'}` : '--%'}\n            </ThemedText.BodyPrimary>\n          </FeeWrapper>\n        </MouseoverTooltip>\n      </FeeColumnWrapper>\n\n      <ReturnColumn>\n        <EthPriceDisplay ethPrice={userReceives} />\n      </ReturnColumn>\n    </Row>\n  )\n}\n\nconst EthPriceDisplay = ({ ethPrice = 0 }: { ethPrice?: number }) => {\n  const [ethConversion, setEthConversion] = useState(3000)\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthConversion(price ?? 0)\n    })\n  }, [])\n\n  return (\n    <Row width=\"100%\" justify=\"flex-end\">\n      <ThemedText.BodyPrimary lineHeight=\"24px\" color={ethPrice ? 'textPrimary' : 'textSecondary'} textAlign=\"right\">\n        {ethPrice !== 0 ? (\n          <Column>\n            <span>{formatEth(ethPrice)} ETH</span>\n            <ThemedText.BodyPrimary color=\"textSecondary\">\n              {formatUsdPrice(ethPrice * ethConversion)}\n            </ThemedText.BodyPrimary>\n          </Column>\n        ) : (\n          '- ETH'\n        )}\n      </ThemedText.BodyPrimary>\n    </Row>\n  )\n}\n","import Column from 'components/Column'\nimport Row from 'components/Row'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useSellAsset } from 'nft/hooks'\nimport { ListingMarket, WalletAsset } from 'nft/types'\nimport { Dispatch, useEffect, useReducer, useState } from 'react'\nimport { Trash2 } from 'react-feather'\nimport styled, { css, useTheme } from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\n\nimport { MarketplaceRow } from './MarketplaceRow'\nimport { SetPriceMethod } from './shared'\n\nconst IMAGE_THUMBNAIL_SIZE = 60\n\nconst NFTListRowWrapper = styled(Row)`\n  padding: 24px 0px;\n  align-items: center;\n  border-radius: 8px;\n\n  &:hover {\n    background: ${({ theme }) => theme.backgroundOutline};\n  }\n`\n\nconst RemoveIconContainer = styled.div`\n  width: ${IMAGE_THUMBNAIL_SIZE}px;\n  height: ${IMAGE_THUMBNAIL_SIZE}px;\n  padding-left: 12px;\n  align-self: flex-start;\n  align-items: center;\n  display: flex;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: none;\n  }\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst NFTInfoWrapper = styled(Row)`\n  align-items: center;\n  min-width: 0px;\n  flex: 2;\n  margin-bottom: auto;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    flex: 1.5;\n  }\n`\n\nconst NFTImage = styled.img`\n  width: ${IMAGE_THUMBNAIL_SIZE}px;\n  height: ${IMAGE_THUMBNAIL_SIZE}px;\n  border-radius: 8px;\n  margin-right: 8px;\n`\n\nconst HideTextOverflow = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`\n\nconst TokenInfoWrapper = styled(Column)`\n  margin-right: 8px;\n  min-width: 0px;\n`\n\nconst TokenName = styled.div`\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 24px;\n  ${HideTextOverflow}\n`\n\nconst CollectionName = styled(ThemedText.BodySmall)`\n  color: ${({ theme }) => theme.textSecondary};\n  line-height: 20px;\n  ${HideTextOverflow};\n`\n\nconst MarketPlaceRowWrapper = styled(Column)`\n  gap: 24px;\n  flex: 1.5;\n  margin-right: 12px;\n  padding: 6px 0px;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    flex: 2;\n  }\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    flex: 3;\n  }\n`\n\ninterface NFTListRowProps {\n  asset: WalletAsset\n  globalPriceMethod?: SetPriceMethod\n  setGlobalPrice: Dispatch<number | undefined>\n  globalPrice?: number\n  selectedMarkets: ListingMarket[]\n}\n\n/**\n * NFTListRow is the outermost row wrapper for an NFT Listing, which shows either the composite of multiple marketplaces listings\n * or can be expanded to show listings per marketplace\n */\nexport const NFTListRow = ({\n  asset,\n  globalPriceMethod,\n  globalPrice,\n  setGlobalPrice,\n  selectedMarkets,\n}: NFTListRowProps) => {\n  const [expandMarketplaceRows, toggleExpandMarketplaceRows] = useReducer((s) => !s, false)\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const [localMarkets, setLocalMarkets] = useState<ListingMarket[]>([])\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\n  const theme = useTheme()\n\n  // Keep localMarkets up to date with changes to globalMarkets\n  useEffect(() => {\n    setLocalMarkets(JSON.parse(JSON.stringify(selectedMarkets)))\n  }, [selectedMarkets])\n\n  return (\n    <NFTListRowWrapper\n      onMouseEnter={() => {\n        !hovered && toggleHovered()\n      }}\n      onMouseLeave={() => {\n        hovered && toggleHovered()\n      }}\n    >\n      <RemoveIconContainer>\n        {hovered && (\n          <Trash2\n            size={20}\n            color={theme.textSecondary}\n            cursor=\"pointer\"\n            onClick={() => {\n              removeAsset(asset)\n            }}\n          />\n        )}\n      </RemoveIconContainer>\n\n      <NFTInfoWrapper>\n        <NFTImage alt={asset.name} src={asset.imageUrl || '/nft/svgs/image-placeholder.svg'} />\n        <TokenInfoWrapper>\n          <TokenName>{asset.name ? asset.name : `#${asset.tokenId}`}</TokenName>\n          <CollectionName>\n            {asset.collection?.name}\n            {asset.collectionIsVerified && <VerifiedIcon style={{ marginBottom: '-5px' }} />}\n          </CollectionName>\n        </TokenInfoWrapper>\n      </NFTInfoWrapper>\n      <MarketPlaceRowWrapper>\n        {expandMarketplaceRows && localMarkets.length > 1 ? (\n          localMarkets.map((market) => {\n            return (\n              <MarketplaceRow\n                globalPriceMethod={globalPriceMethod}\n                globalPrice={globalPrice}\n                setGlobalPrice={setGlobalPrice}\n                selectedMarkets={[market]}\n                removeMarket={() => setLocalMarkets(localMarkets.filter((oldMarket) => oldMarket.name !== market.name))}\n                asset={asset}\n                key={asset.name + market.name}\n                expandMarketplaceRows={expandMarketplaceRows}\n                rowHovered={hovered}\n                toggleExpandMarketplaceRows={toggleExpandMarketplaceRows}\n              />\n            )\n          })\n        ) : (\n          <MarketplaceRow\n            globalPriceMethod={globalPriceMethod}\n            globalPrice={globalPrice}\n            setGlobalPrice={setGlobalPrice}\n            selectedMarkets={localMarkets}\n            asset={asset}\n            rowHovered={hovered}\n            toggleExpandMarketplaceRows={toggleExpandMarketplaceRows}\n          />\n        )}\n      </MarketPlaceRowWrapper>\n    </NFTListRowWrapper>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport Column from 'components/Column'\nimport Row from 'components/Row'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { useSellAsset } from 'nft/hooks'\nimport { DropDownOption, ListingMarket } from 'nft/types'\nimport { useMemo, useReducer, useRef, useState } from 'react'\nimport { ChevronDown } from 'react-feather'\nimport styled, { css } from 'styled-components/macro'\nimport { BREAKPOINTS } from 'theme'\n\nimport { Dropdown } from './Dropdown'\nimport { NFTListRow } from './NFTListRow'\nimport { SetPriceMethod } from './shared'\n\nconst TableHeader = styled.div`\n  display: flex;\n  position: sticky;\n  align-items: center;\n  top: 72px;\n  padding-top: 24px;\n  padding-bottom: 24px;\n  z-index: 3;\n  background-color: ${({ theme }) => theme.backgroundBackdrop};\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 20px;\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    padding-left: 48px;\n  }\n`\n\nconst NFTHeader = styled.div`\n  flex: 2;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    flex: 1.5;\n  }\n`\n\nconst PriceHeaders = styled(Row)`\n  flex: 1.5;\n  margin-right: 12px;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    flex: 3;\n  }\n`\n\nconst LastPriceHeader = styled.div`\n  display: none;\n  flex: 1;\n\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\n    display: flex;\n  }\n`\n\nconst FloorPriceHeader = styled.div`\n  display: none;\n  flex: 1;\n\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\nconst DropdownAndHeaderWrapper = styled(Row)`\n  flex: 2;\n  gap: 4px;\n`\n\nconst DropdownPromptContainer = styled(Column)`\n  position: relative;\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    display: none;\n  }\n`\n\nconst DropdownPrompt = styled(Row)`\n  gap: 4px;\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 16px;\n  border-radius: 4px;\n  padding: 2px 6px;\n  width: min-content;\n  white-space: nowrap;\n  color: ${({ theme }) => theme.textPrimary};\n\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst DropdownChevron = styled(ChevronDown)<{ isOpen: boolean }>`\n  height: 16px;\n  width: 16px;\n  color: ${({ theme }) => theme.textSecondary};\n  transform: ${({ isOpen }) => isOpen && 'rotate(180deg)'};\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `transform ${duration.fast} ${timing.ease}`};\n`\n\nconst DropdownContainer = styled.div`\n  position: absolute;\n  top: 36px;\n  right: 0px;\n`\n\nconst FeeUserReceivesSharedStyles = css`\n  display: none;\n  justify-content: flex-end;\n  @media screen and (min-width: ${BREAKPOINTS.md}px) {\n    display: flex;\n  }\n`\n\nconst FeeHeader = styled.div`\n  flex: 1;\n  ${FeeUserReceivesSharedStyles}\n`\n\nconst UserReceivesHeader = styled.div`\n  flex: 1.5;\n  ${FeeUserReceivesSharedStyles}\n`\n\nconst RowDivider = styled.hr`\n  height: 0px;\n  width: 100%;\n  border-radius: 20px;\n  border-width: 0.5px;\n  border-style: solid;\n  margin: 0;\n  border-color: ${({ theme }) => theme.backgroundInteractive};\n`\n\nexport const NFTListingsGrid = ({ selectedMarkets }: { selectedMarkets: ListingMarket[] }) => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const [globalPriceMethod, setGlobalPriceMethod] = useState(SetPriceMethod.CUSTOM)\n  const [globalPrice, setGlobalPrice] = useState<number>()\n  const [showDropdown, toggleShowDropdown] = useReducer((s) => !s, false)\n  const dropdownRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(dropdownRef, showDropdown ? toggleShowDropdown : undefined)\n\n  const priceDropdownOptions: DropDownOption[] = useMemo(\n    () => [\n      {\n        displayText: 'Custom',\n        isSelected: globalPriceMethod === SetPriceMethod.CUSTOM,\n        onClick: () => {\n          setGlobalPriceMethod(SetPriceMethod.CUSTOM)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'Floor price',\n        isSelected: globalPriceMethod === SetPriceMethod.FLOOR_PRICE,\n        onClick: () => {\n          setGlobalPriceMethod(SetPriceMethod.FLOOR_PRICE)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'Last price',\n        isSelected: globalPriceMethod === SetPriceMethod.LAST_PRICE,\n        onClick: () => {\n          setGlobalPriceMethod(SetPriceMethod.LAST_PRICE)\n          toggleShowDropdown()\n        },\n      },\n      {\n        displayText: 'Same price',\n        isSelected: globalPriceMethod === SetPriceMethod.SAME_PRICE,\n        onClick: () => {\n          setGlobalPriceMethod(SetPriceMethod.SAME_PRICE)\n          toggleShowDropdown()\n        },\n      },\n    ],\n    [globalPriceMethod]\n  )\n\n  let prompt\n  switch (globalPriceMethod) {\n    case SetPriceMethod.CUSTOM:\n      prompt = <Trans>Custom</Trans>\n      break\n    case SetPriceMethod.FLOOR_PRICE:\n      prompt = <Trans>Floor price</Trans>\n      break\n    case SetPriceMethod.LAST_PRICE:\n      prompt = <Trans>Last Price</Trans>\n      break\n    case SetPriceMethod.SAME_PRICE:\n      prompt = <Trans>Same Price</Trans>\n      break\n    default:\n      break\n  }\n\n  return (\n    <Column>\n      <TableHeader>\n        <NFTHeader>\n          <Trans>NFT</Trans>\n        </NFTHeader>\n        <PriceHeaders>\n          <FloorPriceHeader>\n            <Trans>Floor</Trans>\n          </FloorPriceHeader>\n          <LastPriceHeader>\n            <Trans>Last</Trans>\n          </LastPriceHeader>\n\n          <DropdownAndHeaderWrapper ref={dropdownRef}>\n            <Trans>Price</Trans>\n            <DropdownPromptContainer>\n              <DropdownPrompt onClick={toggleShowDropdown}>\n                {prompt} <DropdownChevron isOpen={showDropdown} />\n              </DropdownPrompt>\n              {showDropdown && (\n                <DropdownContainer>\n                  <Dropdown dropDownOptions={priceDropdownOptions} width={200} />\n                </DropdownContainer>\n              )}\n            </DropdownPromptContainer>\n          </DropdownAndHeaderWrapper>\n\n          <FeeHeader>\n            <Trans>Fees</Trans>\n          </FeeHeader>\n          <UserReceivesHeader>\n            <Trans>You receive</Trans>\n          </UserReceivesHeader>\n        </PriceHeaders>\n      </TableHeader>\n      {sellAssets.map((asset) => {\n        return (\n          <>\n            <NFTListRow\n              asset={asset}\n              globalPriceMethod={globalPriceMethod}\n              globalPrice={globalPrice}\n              setGlobalPrice={setGlobalPrice}\n              selectedMarkets={selectedMarkets}\n            />\n            {sellAssets.indexOf(asset) < sellAssets.length - 1 && <RowDivider />}\n          </>\n        )\n      })}\n    </Column>\n  )\n}\n","import { SMALL_MEDIA_BREAKPOINT } from 'components/Tokens/constants'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ChevronUpIcon } from 'nft/components/icons'\nimport { Checkbox } from 'nft/components/layout/Checkbox'\nimport { buttonTextMedium, caption } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { ListingMarket } from 'nft/types'\nimport { ListingMarkets } from 'nft/utils/listNfts'\nimport { Dispatch, FormEvent, useMemo, useReducer, useRef } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\n\nconst MarketplaceRowWrapper = styled(Row)`\n  gap: 6px;\n  height: 44px;\n  width: 100%;\n  cursor: pointer;\n  justify-content: space-between;\n  padding: 0px 16px;\n  &:hover {\n    background-color: ${({ theme }) => theme.backgroundInteractive};\n  }\n  border-radius: 12px;\n`\n\nconst MarketplaceDropdownIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  border-radius: 4px;\n  object-fit: cover;\n`\n\nconst FeeText = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n`\n\ninterface MarketplaceRowProps {\n  market: ListingMarket\n  setSelectedMarkets: Dispatch<ListingMarket[]>\n  selectedMarkets: ListingMarket[]\n}\n\nconst MarketplaceRow = ({ market, setSelectedMarkets, selectedMarkets }: MarketplaceRowProps) => {\n  const isSelected = selectedMarkets.includes(market)\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\n\n  const toggleSelected = () => {\n    if (selectedMarkets.length === 1 && isSelected) return\n    isSelected\n      ? setSelectedMarkets(selectedMarkets.filter((selected: ListingMarket) => selected !== market))\n      : setSelectedMarkets([...selectedMarkets, market])\n  }\n\n  const handleCheckbox = (e: FormEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n  return (\n    <MarketplaceRowWrapper onMouseEnter={toggleHovered} onMouseLeave={toggleHovered} onClick={toggleSelected}>\n      <Row gap=\"12\" onClick={toggleSelected}>\n        <MarketplaceDropdownIcon alt={market.name} src={market.icon} />\n        <Column>\n          <ThemedText.BodyPrimary>{market.name}</ThemedText.BodyPrimary>\n          <FeeText className={caption}>{market.fee}% fee</FeeText>\n        </Column>\n      </Row>\n\n      <Checkbox hovered={hovered} checked={isSelected} onClick={handleCheckbox}>\n        <span />\n      </Checkbox>\n    </MarketplaceRowWrapper>\n  )\n}\n\nconst HeaderButtonWrap = styled(Row)`\n  padding: 12px;\n  border-radius: 12px;\n  width: 180px;\n  justify-content: space-between;\n  background: ${({ theme }) => theme.backgroundInteractive};\n  cursor: pointer;\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    width: 220px;\n  }\n`\n\nconst HeaderButtonContentWrapper = styled.div`\n  display: flex;\n`\n\nconst MarketIcon = styled.img<{ index: number; totalSelected: number }>`\n  height: 20px;\n  width: 20px;\n  margin-right: 8px;\n  border: 1px solid;\n  border-color: ${({ theme }) => theme.backgroundInteractive};\n  border-radius: 4px;\n  z-index: ${({ index, totalSelected }) => totalSelected - index};\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -18}px`};\n`\n\nconst Chevron = styled(ChevronUpIcon)<{ isOpen: boolean }>`\n  height: 20px;\n  width: 20px;\n  fill: ${({ theme }) => theme.textPrimary};\n  transition: ${({\n    theme: {\n      transition: { duration },\n    },\n  }) => `${duration.fast} transform`};\n  transform: ${({ isOpen }) => `rotate(${isOpen ? 0 : 180}deg)`};\n`\n\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`\n\nconst DropdownWrapper = styled(Column)<{ isOpen: boolean }>`\n  padding: 16px 0px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  display: ${({ isOpen }) => (isOpen ? 'flex' : 'none')};\n  position: absolute;\n  top: 52px;\n  width: 100%;\n  border-radius: 12px;\n  gap: 12px;\n  z-index: ${Z_INDEX.modalBackdrop};\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  border: 0.5px solid ${({ theme }) => theme.backgroundOutline};\n`\n\nexport const SelectMarketplacesDropdown = ({\n  setSelectedMarkets,\n  selectedMarkets,\n}: {\n  setSelectedMarkets: Dispatch<ListingMarket[]>\n  selectedMarkets: ListingMarket[]\n}) => {\n  const [isOpen, toggleIsOpen] = useReducer((s) => !s, false)\n  const dropdownDisplayText = useMemo(\n    () => (selectedMarkets.length === 1 ? selectedMarkets[0].name : 'Multiple'),\n    [selectedMarkets]\n  )\n  const ref = useRef<HTMLDivElement>(null)\n  useOnClickOutside(ref, () => isOpen && toggleIsOpen())\n  return (\n    <ModalWrapper ref={ref}>\n      <HeaderButtonWrap className={buttonTextMedium} onClick={toggleIsOpen}>\n        <HeaderButtonContentWrapper>\n          {selectedMarkets.map((market, index) => {\n            return (\n              <MarketIcon\n                key={index}\n                alt={market.name}\n                src={market.icon}\n                totalSelected={selectedMarkets.length}\n                index={index}\n              />\n            )\n          })}\n          {dropdownDisplayText}\n        </HeaderButtonContentWrapper>\n\n        <Chevron isOpen={isOpen} secondaryColor={themeVars.colors.textPrimary} />\n      </HeaderButtonWrap>\n      <DropdownWrapper isOpen={isOpen}>\n        {ListingMarkets.map((market) => {\n          return MarketplaceRow({ market, setSelectedMarkets, selectedMarkets })\n        })}\n      </DropdownWrapper>\n    </ModalWrapper>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\nimport { formatCurrencyAmount, NumberType } from '@uniswap/conedison/format'\nimport { useWeb3React } from '@web3-react/core'\nimport Column from 'components/Column'\nimport Row from 'components/Row'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { ListingButton } from 'nft/components/profile/list/ListingButton'\nimport {\n  approveCollectionRow,\n  getTotalEthValue,\n  useSubscribeListingState,\n  verifyStatus,\n} from 'nft/components/profile/list/utils'\nimport { useIsMobile, useNFTList, useProfilePageState, useSellAsset } from 'nft/hooks'\nimport { LIST_PAGE_MARGIN, LIST_PAGE_MARGIN_MOBILE } from 'nft/pages/profile/shared'\nimport { looksRareNonceFetcher } from 'nft/queries'\nimport { ProfilePageStateType } from 'nft/types'\nimport { formatEth } from 'nft/utils'\nimport { ListingMarkets } from 'nft/utils/listNfts'\nimport { useEffect, useMemo, useReducer, useState } from 'react'\nimport { ArrowLeft } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport { ListModal } from './Modal/ListModal'\nimport { NFTListingsGrid } from './NFTListingsGrid'\nimport { SelectMarketplacesDropdown } from './SelectMarketplacesDropdown'\nimport { SetDurationModal } from './SetDurationModal'\n\nconst ListingHeader = styled(Column)`\n  gap: 16px;\n  margin-top: 36px;\n\n  @media screen and (min-width: ${BREAKPOINTS.xs}px) {\n    gap: 4px;\n  }\n`\n\nconst ArrowContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 4px;\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    height: 40px;\n    width: 40px;\n  }\n`\n\nconst BackArrow = styled(ArrowLeft)`\n  height: 16px;\n  width: 16px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.textSecondary};\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    height: 20px;\n    width: 20px;\n  }\n`\n\nconst TitleWrapper = styled(Row)`\n  gap: 4px;\n  margin-bottom: 12px;\n  white-space: nowrap;\n  width: min-content;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 28px;\n\n  @media screen and (min-width: ${BREAKPOINTS.xs}px) {\n    margin-bottom: 0px;\n    font-weight: 500;\n    font-size: 28px;\n    line-height: 36px;\n  }\n`\n\nconst ButtonsWrapper = styled(Row)`\n  gap: 12px;\n  width: min-content;\n`\n\nconst MarketWrap = styled.section`\n  gap: 48px;\n  margin: 0px auto;\n  width: 100%;\n  max-width: 1200px;\n`\n\nconst ListingHeaderRow = styled(Row)`\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n\n  @media screen and (min-width: ${BREAKPOINTS.sm}px) {\n    padding-left: 40px;\n  }\n`\n\nconst GridWrapper = styled.div`\n  margin-top: 24px;\n  margin-bottom: 48px;\n`\n\nconst FloatingConfirmationBar = styled(Row)<{ issues: boolean }>`\n  padding: 12px 12px 12px 32px;\n  border: 1px solid;\n  border-color: ${({ theme, issues }) => (issues ? theme.backgroundOutline : theme.accentAction)};\n  border-radius: 20px;\n  white-space: nowrap;\n  justify-content: space-between;\n  background: ${({ theme }) => theme.backgroundSurface};\n  position: fixed;\n  bottom: 32px;\n  width: calc(100vw - ${LIST_PAGE_MARGIN * 2}px);\n  left: 50%;\n  transform: translateX(-50%);\n  max-width: 1200px;\n  z-index: ${Z_INDEX.under_dropdown};\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n\n  @media screen and (max-width: ${BREAKPOINTS.lg}px) {\n    bottom: 68px;\n  }\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: calc(100% - ${LIST_PAGE_MARGIN_MOBILE * 2}px);\n    padding: 8px 8px 8px 16px;\n  }\n`\n\nconst Overlay = styled.div`\n  position: fixed;\n  bottom: 0px;\n  height: 158px;\n  width: 100vw;\n  background: ${({ theme }) => `linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, ${theme.backgroundBackdrop} 100%)`};\n`\n\nconst UsdValue = styled(ThemedText.SubHeader)`\n  line-height: 24px;\n  color: ${({ theme }) => theme.textSecondary};\n  display: none;\n\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\n    display: flex;\n  }\n`\n\nconst ProceedsAndButtonWrapper = styled(Row)`\n  width: min-content;\n  gap: 40px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    gap: 20px;\n  }\n`\n\nconst ProceedsWrapper = styled(Row)`\n  width: min-content;\n  gap: 16px;\n`\n\nconst EthValueWrapper = styled.span<{ totalEthListingValue: boolean }>`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 28px;\n  color: ${({ theme, totalEthListingValue }) => (totalEthListingValue ? theme.textPrimary : theme.textSecondary)};\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    font-size: 16px;\n    line-height: 24px;\n  }\n`\n\nexport const ListPage = () => {\n  const { setProfilePageState: setSellPageState } = useProfilePageState()\n  const { provider } = useWeb3React()\n  const isMobile = useIsMobile()\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\n  const { setGlobalMarketplaces, sellAssets, issues } = useSellAsset(\n    ({ setGlobalMarketplaces, sellAssets, issues }) => ({\n      setGlobalMarketplaces,\n      sellAssets,\n      issues,\n    }),\n    shallow\n  )\n  const { listings, collectionsRequiringApproval, setLooksRareNonce, setCollectionStatusAndCallback } = useNFTList(\n    ({ listings, collectionsRequiringApproval, setLooksRareNonce, setCollectionStatusAndCallback }) => ({\n      listings,\n      collectionsRequiringApproval,\n      setLooksRareNonce,\n      setCollectionStatusAndCallback,\n    }),\n    shallow\n  )\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n  const nativeCurrency = useNativeCurrency()\n  const parsedAmount = tryParseCurrencyAmount(totalEthListingValue.toString(), nativeCurrency)\n  const usdcValue = useStablecoinValue(parsedAmount)\n  const usdcAmount = formatCurrencyAmount(usdcValue, NumberType.FiatTokenPrice)\n  const [showListModal, toggleShowListModal] = useReducer((s) => !s, false)\n  const [selectedMarkets, setSelectedMarkets] = useState([ListingMarkets[0]]) // default marketplace: x2y2\n  const signer = provider?.getSigner()\n\n  // instantiate listings and collections to approve when users modify input data\n  useSubscribeListingState()\n\n  useEffect(() => {\n    setGlobalMarketplaces(selectedMarkets)\n  }, [selectedMarkets, setGlobalMarketplaces])\n\n  const startListingEventProperties = {\n    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n    token_ids: sellAssets.map((asset) => asset.tokenId),\n    marketplaces: Array.from(new Set(listings.map((asset) => asset.marketplace.name))),\n    list_quantity: listings.length,\n    usd_value: usdcAmount,\n    ...trace,\n  }\n\n  const startListingFlow = async () => {\n    if (!signer) return\n    sendAnalyticsEvent(NFTEventName.NFT_SELL_START_LISTING, { ...startListingEventProperties })\n    const signerAddress = await signer.getAddress()\n    const nonce = await looksRareNonceFetcher(signerAddress)\n    setLooksRareNonce(nonce ?? 0)\n\n    // for all unique collection, marketplace combos -> approve collections\n    for (const collectionRow of collectionsRequiringApproval) {\n      verifyStatus(collectionRow.status) &&\n        (isMobile\n          ? await approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback)\n          : approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback))\n    }\n  }\n\n  const showModalAndStartListing = () => {\n    toggleShowListModal()\n    startListingFlow()\n  }\n\n  const BannerText = isMobile ? (\n    <ThemedText.SubHeader lineHeight=\"24px\">\n      <Trans>Receive</Trans>\n    </ThemedText.SubHeader>\n  ) : (\n    <ThemedText.HeadlineSmall lineHeight=\"28px\">\n      <Trans>You receive</Trans>\n    </ThemedText.HeadlineSmall>\n  )\n\n  return (\n    <Column>\n      <MarketWrap>\n        <ListingHeader>\n          <Row>\n            <ArrowContainer>\n              <BackArrow onClick={() => setSellPageState(ProfilePageStateType.VIEWING)} />\n            </ArrowContainer>\n            <ThemedText.BodySmall lineHeight=\"20px\" color=\"textSecondary\">\n              <Trans>My NFTs</Trans>\n            </ThemedText.BodySmall>\n          </Row>\n          <ListingHeaderRow>\n            <TitleWrapper>\n              <Trans>Sell NFTs</Trans>\n            </TitleWrapper>\n            <ButtonsWrapper>\n              <SelectMarketplacesDropdown setSelectedMarkets={setSelectedMarkets} selectedMarkets={selectedMarkets} />\n              <SetDurationModal />\n            </ButtonsWrapper>\n          </ListingHeaderRow>\n        </ListingHeader>\n        <GridWrapper>\n          <NFTListingsGrid selectedMarkets={selectedMarkets} />\n        </GridWrapper>\n      </MarketWrap>\n\n      <FloatingConfirmationBar issues={!!issues}>\n        {BannerText}\n        <ProceedsAndButtonWrapper>\n          <ProceedsWrapper>\n            <EthValueWrapper totalEthListingValue={!!totalEthListingValue}>\n              {totalEthListingValue > 0 ? formatEth(totalEthListingValue) : '-'} ETH\n            </EthValueWrapper>\n            {!!usdcValue && <UsdValue>{usdcAmount}</UsdValue>}\n          </ProceedsWrapper>\n          <ListingButton onClick={showModalAndStartListing} />\n        </ProceedsAndButtonWrapper>\n      </FloatingConfirmationBar>\n      <Overlay />\n\n      {showListModal && <ListModal overlayClick={toggleShowListModal} />}\n    </Column>\n  )\n}\n","import { PureComponent } from 'react';\n\nfunction isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n\nfunction isRangeVisible(_ref) {\n  var lastRenderedStartIndex = _ref.lastRenderedStartIndex,\n      lastRenderedStopIndex = _ref.lastRenderedStopIndex,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);\n}\n\nfunction scanForUnloadedRanges(_ref) {\n  var isItemLoaded = _ref.isItemLoaded,\n      itemCount = _ref.itemCount,\n      minimumBatchSize = _ref.minimumBatchSize,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  var unloadedRanges = [];\n\n  var rangeStartIndex = null;\n  var rangeStopIndex = null;\n\n  for (var _index = startIndex; _index <= stopIndex; _index++) {\n    var loaded = isItemLoaded(_index);\n\n    if (!loaded) {\n      rangeStopIndex = _index;\n      if (rangeStartIndex === null) {\n        rangeStartIndex = _index;\n      }\n    } else if (rangeStopIndex !== null) {\n      unloadedRanges.push(rangeStartIndex, rangeStopIndex);\n\n      rangeStartIndex = rangeStopIndex = null;\n    }\n  }\n\n  // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.\n  // Scan forward to try filling our :minimumBatchSize.\n  if (rangeStopIndex !== null) {\n    var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), itemCount - 1);\n\n    for (var _index2 = rangeStopIndex + 1; _index2 <= potentialStopIndex; _index2++) {\n      if (!isItemLoaded(_index2)) {\n        rangeStopIndex = _index2;\n      } else {\n        break;\n      }\n    }\n\n    unloadedRanges.push(rangeStartIndex, rangeStopIndex);\n  }\n\n  // Check to see if our first range ended prematurely.\n  // In this case we should scan backwards to try filling our :minimumBatchSize.\n  if (unloadedRanges.length) {\n    while (unloadedRanges[1] - unloadedRanges[0] + 1 < minimumBatchSize && unloadedRanges[0] > 0) {\n      var _index3 = unloadedRanges[0] - 1;\n\n      if (!isItemLoaded(_index3)) {\n        unloadedRanges[0] = _index3;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return unloadedRanges;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar InfiniteLoader = function (_PureComponent) {\n  inherits(InfiniteLoader, _PureComponent);\n\n  function InfiniteLoader() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, InfiniteLoader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = InfiniteLoader.__proto__ || Object.getPrototypeOf(InfiniteLoader)).call.apply(_ref, [this].concat(args))), _this), _this._lastRenderedStartIndex = -1, _this._lastRenderedStopIndex = -1, _this._memoizedUnloadedRanges = [], _this._onItemsRendered = function (_ref2) {\n      var visibleStartIndex = _ref2.visibleStartIndex,\n          visibleStopIndex = _ref2.visibleStopIndex;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!isInteger(visibleStartIndex) || !isInteger(visibleStopIndex)) {\n          console.warn('Invalid onItemsRendered signature; please refer to InfiniteLoader documentation.');\n        }\n\n        if (typeof _this.props.loadMoreRows === 'function') {\n          console.warn('InfiniteLoader \"loadMoreRows\" prop has been renamed to \"loadMoreItems\".');\n        }\n      }\n\n      _this._lastRenderedStartIndex = visibleStartIndex;\n      _this._lastRenderedStopIndex = visibleStopIndex;\n\n      _this._ensureRowsLoaded(visibleStartIndex, visibleStopIndex);\n    }, _this._setRef = function (listRef) {\n      _this._listRef = listRef;\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(InfiniteLoader, [{\n    key: 'resetloadMoreItemsCache',\n    value: function resetloadMoreItemsCache() {\n      var autoReload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      this._memoizedUnloadedRanges = [];\n\n      if (autoReload) {\n        this._ensureRowsLoaded(this._lastRenderedStartIndex, this._lastRenderedStopIndex);\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._listRef == null) {\n          console.warn('Invalid list ref; please refer to InfiniteLoader documentation.');\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n\n\n      return children({\n        onItemsRendered: this._onItemsRendered,\n        ref: this._setRef\n      });\n    }\n  }, {\n    key: '_ensureRowsLoaded',\n    value: function _ensureRowsLoaded(startIndex, stopIndex) {\n      var _props = this.props,\n          isItemLoaded = _props.isItemLoaded,\n          itemCount = _props.itemCount,\n          _props$minimumBatchSi = _props.minimumBatchSize,\n          minimumBatchSize = _props$minimumBatchSi === undefined ? 10 : _props$minimumBatchSi,\n          _props$threshold = _props.threshold,\n          threshold = _props$threshold === undefined ? 15 : _props$threshold;\n\n\n      var unloadedRanges = scanForUnloadedRanges({\n        isItemLoaded: isItemLoaded,\n        itemCount: itemCount,\n        minimumBatchSize: minimumBatchSize,\n        startIndex: Math.max(0, startIndex - threshold),\n        stopIndex: Math.min(itemCount - 1, stopIndex + threshold)\n      });\n\n      // Avoid calling load-rows unless range has changed.\n      // This shouldn't be strictly necessary, but is maybe nice to do.\n      if (this._memoizedUnloadedRanges.length !== unloadedRanges.length || this._memoizedUnloadedRanges.some(function (startOrStop, index) {\n        return unloadedRanges[index] !== startOrStop;\n      })) {\n        this._memoizedUnloadedRanges = unloadedRanges;\n        this._loadUnloadedRanges(unloadedRanges);\n      }\n    }\n  }, {\n    key: '_loadUnloadedRanges',\n    value: function _loadUnloadedRanges(unloadedRanges) {\n      var _this2 = this;\n\n      // loadMoreRows was renamed to loadMoreItems in v1.0.3; will be removed in v2.0\n      var loadMoreItems = this.props.loadMoreItems || this.props.loadMoreRows;\n\n      var _loop = function _loop(i) {\n        var startIndex = unloadedRanges[i];\n        var stopIndex = unloadedRanges[i + 1];\n        var promise = loadMoreItems(startIndex, stopIndex);\n        if (promise != null) {\n          promise.then(function () {\n            // Refresh the visible rows if any of them have just been loaded.\n            // Otherwise they will remain in their unloaded visual state.\n            if (isRangeVisible({\n              lastRenderedStartIndex: _this2._lastRenderedStartIndex,\n              lastRenderedStopIndex: _this2._lastRenderedStopIndex,\n              startIndex: startIndex,\n              stopIndex: stopIndex\n            })) {\n              // Handle an unmount while promises are still in flight.\n              if (_this2._listRef == null) {\n                return;\n              }\n\n              // Resize cached row sizes for VariableSizeList,\n              // otherwise just re-render the list.\n              if (typeof _this2._listRef.resetAfterIndex === 'function') {\n                _this2._listRef.resetAfterIndex(startIndex, true);\n              } else {\n                // HACK reset temporarily cached item styles to force PureComponent to re-render.\n                // This is pretty gross, but I'm okay with it for now.\n                // Don't judge me.\n                if (typeof _this2._listRef._getItemStyleCache === 'function') {\n                  _this2._listRef._getItemStyleCache(-1);\n                }\n                _this2._listRef.forceUpdate();\n              }\n            }\n          });\n        }\n      };\n\n      for (var i = 0; i < unloadedRanges.length; i += 2) {\n        _loop(i);\n      }\n    }\n  }]);\n  return InfiniteLoader;\n}(PureComponent);\n\nexport default InfiniteLoader;\n","import { ScrollBarStyles } from 'components/Common'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { AnimatedBox, Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { XMarkIcon } from 'nft/components/icons'\nimport { Checkbox } from 'nft/components/layout/Checkbox'\nimport { checkbox } from 'nft/components/layout/Checkbox.css'\nimport { Input } from 'nft/components/layout/Input'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useFiltersExpanded, useIsMobile, useWalletCollections } from 'nft/hooks'\nimport { WalletCollection } from 'nft/types'\nimport {\n  CSSProperties,\n  Dispatch,\n  FormEvent,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from 'react'\nimport { easings, useSpring } from 'react-spring'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { FixedSizeList, ListOnItemsRenderedProps } from 'react-window'\nimport InfiniteLoader from 'react-window-infinite-loader'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { TRANSITION_DURATIONS } from 'theme/styles'\n\nimport { WALLET_COLLECTIONS_PAGINATION_LIMIT } from './ProfilePage'\nimport * as styles from './ProfilePage.css'\n\nconst COLLECTION_ROW_HEIGHT = 44\n\nconst ItemsContainer = styled(Column)`\n  ${ScrollBarStyles}\n  height: 100vh;\n`\n\nconst LongLoadingBubble = styled(LoadingBubble)`\n  min-height: 15px;\n  width: 75%;\n`\n\nconst SmallLoadingBubble = styled(LoadingBubble)`\n  height: 20px;\n  width: 20px;\n  margin-right: 8px;\n`\n\nconst MobileMenuHeader = styled(Row)`\n  justify-content: space-between;\n  padding-bottom: 8px;\n`\n\nconst LoadingCollectionItem = ({ style }: { style?: CSSProperties }) => {\n  return (\n    <Row display=\"flex\" justifyContent=\"space-between\" style={style} paddingLeft=\"12\" paddingRight=\"16\">\n      <Row display=\"flex\" flex=\"1\">\n        <SmallLoadingBubble />\n        <LongLoadingBubble />\n      </Row>\n      <Box as=\"span\" borderColor=\"backgroundOutline\" className={checkbox} aria-hidden=\"true\" />\n    </Row>\n  )\n}\n\ninterface CollectionFilterRowProps {\n  index: number\n  style: CSSProperties\n}\n\ninterface FilterSidebarProps {\n  fetchNextPage: () => void\n  hasNextPage?: boolean\n  isFetchingNextPage: boolean\n  walletCollections: WalletCollection[]\n}\n\nexport const FilterSidebar = ({\n  fetchNextPage,\n  hasNextPage,\n  isFetchingNextPage,\n  walletCollections,\n}: FilterSidebarProps) => {\n  const collectionFilters = useWalletCollections((state) => state.collectionFilters)\n  const setCollectionFilters = useWalletCollections((state) => state.setCollectionFilters)\n\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\n  const isMobile = useIsMobile()\n\n  const { sidebarX } = useSpring({\n    sidebarX: isFiltersExpanded ? 0 : -360,\n    config: {\n      duration: TRANSITION_DURATIONS.medium,\n      easing: easings.easeOutSine,\n    },\n  })\n\n  const hideSearch = useMemo(\n    () => (walletCollections && walletCollections?.length >= WALLET_COLLECTIONS_PAGINATION_LIMIT) || isFetchingNextPage,\n    [walletCollections, isFetchingNextPage]\n  )\n\n  return (\n    // @ts-ignore\n    <AnimatedBox\n      position={{ sm: 'fixed', md: 'sticky' }}\n      top={{ sm: '0', md: '72' }}\n      left={{ sm: '0', md: 'unset' }}\n      width={{ sm: 'full', md: '332', lg: '332' }}\n      height={{ sm: 'full', md: 'auto' }}\n      zIndex={{ sm: 'modal', md: 'auto' }}\n      display={isFiltersExpanded ? 'flex' : 'none'}\n      style={{ transform: isMobile ? undefined : sidebarX.to((x) => `translateX(${x}px)`) }}\n      background=\"backgroundBackdrop\"\n    >\n      <Box\n        paddingTop={{ sm: '24', md: '0' }}\n        paddingLeft={{ sm: '16', md: '0' }}\n        paddingRight=\"16\"\n        width={{ sm: 'full', md: '332', lg: '332' }}\n      >\n        {isMobile && (\n          <MobileMenuHeader>\n            <ThemedText.HeadlineSmall>Filter</ThemedText.HeadlineSmall>\n            <XMarkIcon\n              height={28}\n              width={28}\n              fill={themeVars.colors.textPrimary}\n              onClick={() => setFiltersExpanded(false)}\n            />\n          </MobileMenuHeader>\n        )}\n        <CollectionSelect\n          collections={walletCollections}\n          collectionFilters={collectionFilters}\n          setCollectionFilters={setCollectionFilters}\n          fetchNextPage={fetchNextPage}\n          hasNextPage={hasNextPage}\n          isFetchingNextPage={isFetchingNextPage}\n          hideSearch={hideSearch}\n        />\n      </Box>\n    </AnimatedBox>\n  )\n}\n\nconst CollectionSelect = ({\n  collections,\n  collectionFilters,\n  setCollectionFilters,\n  fetchNextPage,\n  hasNextPage,\n  isFetchingNextPage,\n  hideSearch,\n}: {\n  collections: WalletCollection[]\n  collectionFilters: Array<string>\n  setCollectionFilters: (address: string) => void\n  fetchNextPage: () => void\n  hasNextPage?: boolean\n  isFetchingNextPage: boolean\n  hideSearch: boolean\n}) => {\n  const [collectionSearchText, setCollectionSearchText] = useState('')\n  const [displayCollections, setDisplayCollections] = useState(collections)\n\n  useEffect(() => {\n    if (collectionSearchText) {\n      const filtered = collections.filter((collection) =>\n        collection.name?.toLowerCase().includes(collectionSearchText.toLowerCase())\n      )\n      setDisplayCollections(filtered)\n    } else {\n      setDisplayCollections(collections)\n    }\n  }, [collectionSearchText, collections])\n\n  const itemKey = useCallback((index: number, data: WalletCollection[]) => {\n    if (!data) return index\n    const collection = data[index]\n    return `${collection.address}_${index}`\n  }, [])\n\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\n  const itemCount = hasNextPage ? displayCollections.length + 1 : displayCollections.length\n\n  // Only load 1 page of items at a time.\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\n  const loadMoreItems = isFetchingNextPage ? () => null : fetchNextPage\n\n  // Every row is loaded except for our loading indicator row.\n  const isItemLoaded = useCallback(\n    (index: number) => !hasNextPage || index < displayCollections.length,\n    [displayCollections.length, hasNextPage]\n  )\n\n  const CollectionFilterRow = useCallback(\n    ({ index, style }: CollectionFilterRowProps) => {\n      const collection = !!displayCollections && displayCollections[index]\n      if (!collection || isFetchingNextPage) {\n        return <LoadingCollectionItem style={style} key={index} />\n      }\n      return (\n        <CollectionItem\n          style={style}\n          key={itemKey(index, displayCollections)}\n          collection={displayCollections[index]}\n          collectionFilters={collectionFilters}\n          setCollectionFilters={setCollectionFilters}\n        />\n      )\n    },\n    [displayCollections, isFetchingNextPage, itemKey, collectionFilters, setCollectionFilters]\n  )\n\n  return (\n    <>\n      <Box className={subhead} marginTop=\"12\" marginBottom=\"16\" width=\"276\">\n        Collections\n      </Box>\n      <Box paddingBottom=\"12\" borderRadius=\"8\">\n        <Column as=\"ul\" paddingLeft=\"0\" gap=\"10\" style={{ maxHeight: '80vh' }}>\n          {!hideSearch && (\n            <CollectionFilterSearch\n              collectionSearchText={collectionSearchText}\n              setCollectionSearchText={setCollectionSearchText}\n            />\n          )}\n          <ItemsContainer>\n            <AutoSizer disableWidth>\n              {({ height }) => (\n                <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\n                  {({\n                    onItemsRendered,\n                    ref,\n                  }: {\n                    onItemsRendered: (props: ListOnItemsRenderedProps) => any\n                    ref: any\n                  }) => (\n                    <FixedSizeList\n                      height={height}\n                      width=\"100%\"\n                      itemCount={itemCount}\n                      itemSize={COLLECTION_ROW_HEIGHT}\n                      onItemsRendered={onItemsRendered}\n                      itemKey={itemKey}\n                      ref={ref}\n                    >\n                      {CollectionFilterRow}\n                    </FixedSizeList>\n                  )}\n                </InfiniteLoader>\n              )}\n            </AutoSizer>\n          </ItemsContainer>\n        </Column>\n      </Box>\n    </>\n  )\n}\n\nconst CollectionFilterSearch = ({\n  collectionSearchText,\n  setCollectionSearchText,\n}: {\n  collectionSearchText: string\n  setCollectionSearchText: Dispatch<SetStateAction<string>>\n}) => {\n  return (\n    <Input\n      placeholder=\"Search\"\n      marginTop=\"8\"\n      marginBottom=\"8\"\n      autoComplete=\"off\"\n      position=\"static\"\n      width=\"full\"\n      value={collectionSearchText}\n      onChange={(e: FormEvent<HTMLInputElement>) => setCollectionSearchText(e.currentTarget.value)}\n    />\n  )\n}\n\nconst CollectionItem = ({\n  collection,\n  collectionFilters,\n  setCollectionFilters,\n  style,\n}: {\n  collection: WalletCollection\n  collectionFilters: Array<string>\n  setCollectionFilters: (address: string) => void\n  style?: CSSProperties\n}) => {\n  const [isCheckboxSelected, setCheckboxSelected] = useState(false)\n  const [hovered, toggleHovered] = useReducer((state) => {\n    return !state\n  }, false)\n  const isChecked = useCallback(\n    (address: string) => {\n      return collectionFilters.some((collection) => collection === address)\n    },\n    [collectionFilters]\n  )\n  const handleCheckbox = () => {\n    setCheckboxSelected(!isCheckboxSelected)\n    setCollectionFilters(collection.address)\n  }\n  return (\n    <Row\n      maxWidth=\"full\"\n      overflowX=\"hidden\"\n      overflowY=\"hidden\"\n      fontWeight=\"normal\"\n      className={styles.subRowHover}\n      justifyContent=\"space-between\"\n      cursor=\"pointer\"\n      paddingLeft=\"12\"\n      paddingRight=\"16\"\n      borderRadius=\"12\"\n      style={{\n        paddingBottom: '22px',\n        paddingTop: '22px',\n        ...style,\n      }}\n      maxHeight={`${COLLECTION_ROW_HEIGHT}`}\n      as=\"li\"\n      onMouseEnter={toggleHovered}\n      onMouseLeave={toggleHovered}\n      onClick={handleCheckbox}\n    >\n      <Row>\n        <Box as=\"img\" borderRadius=\"round\" width=\"20\" height=\"20\" src={collection.image} />\n        <Box\n          as=\"span\"\n          whiteSpace=\"nowrap\"\n          textOverflow=\"ellipsis\"\n          overflow=\"hidden\"\n          paddingLeft=\"12\"\n          paddingRight=\"14\"\n          style={{ minHeight: 15, maxWidth: '180px' }}\n        >\n          {collection.name}{' '}\n        </Box>\n      </Row>\n\n      <Checkbox checked={isChecked(collection.address)} hovered={hovered} onChange={handleCheckbox}>\n        <Box as=\"span\" color=\"textTertiary\" marginRight=\"12\" marginLeft=\"auto\">\n          {collection.count}\n        </Box>\n      </Checkbox>\n    </Row>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/profile/view/ProfilePage.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/profile/view/ProfilePage.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xYnc1ZGxyMSB7CiAgbWF4LXdpZHRoOiAxMDAwcHg7CiAgbWFyZ2luOiAwIGF1dG87Cn0KLl8xYnc1ZGxyMiB7CiAgbWFyZ2luLWJvdHRvbTogLTNweDsKfQouXzFidzVkbHIzOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtYmFja2dyb3VuZEludGVyYWN0aXZlKTsKfQouXzFidzVkbHI0IHsKICBoZWlnaHQ6IDEycHg7CiAgd2lkdGg6IDEycHg7CiAgbWFyZ2luLWxlZnQ6IDJweDsKICBtYXJnaW4tYm90dG9tOiAtMnB4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7Cn0KLl8xYnc1ZGxyNSB7CiAgd2lkdGg6IDE5MHB4Owp9Ci5fMWJ3NWRscjYgewogIGJveC1zaGFkb3c6IHZhcigtLXJndzZlem0pOwp9Ci5fMWJ3NWRscjcgewogIGJveC1zaGFkb3c6IDAgMTRweCAxNnB4IDAgcmdiYSg3MCwgMTE1LCAyNTAsIDAuNCk7Cn0KLl8xYnc1ZGxyOCB7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICBtYXgtd2lkdGg6IDEwMHB4OwogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwogIG92ZXJmbG93OiBoaWRkZW47Cn0=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1bw5dlr1 rgw6ez2qu rgw6ez2p5 rgw6ez2x9 rgw6ez2vk';\nexport var ethIcon = '_1bw5dlr2';\nexport var subRowHover = '_1bw5dlr3 rgw6ezeg rgw6ezc4 rgw6ezfm';\nexport var verifiedBadge = '_1bw5dlr4';\nexport var dropDown = '_1bw5dlr5';\nexport var activeDropDown = '_1bw5dlr6';\nexport var activeDropDownItems = '_1bw5dlr7';\nexport var collectionFilterBubbleText = '_1bw5dlr8';","import { Box } from 'nft/components/Box'\nimport { assetList } from 'nft/components/collection/CollectionNfts.css'\nimport { loadingAsset } from 'nft/css/loading.css'\nimport { ScreenBreakpointsPaddings } from 'nft/pages/collection/index.css'\nimport styled from 'styled-components/macro'\n\nimport { DEFAULT_WALLET_ASSET_QUERY_AMOUNT } from './ProfilePage'\n\nconst SkeletonPageWrapper = styled.div`\n  ${ScreenBreakpointsPaddings};\n  padding-top: 40px;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-top: 16px;\n  }\n`\n\nconst SkeletonBodyWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 18px;\n`\n\nconst SkeletonRowWrapper = styled.div`\n  display: flex;\n  flex-direct: row;\n  width: 100%;\n`\n\nconst AccountDetailsSkeletonWrapper = styled(SkeletonRowWrapper)`\n  gap: 12px;\n  margin-bottom: 30px;\n`\n\nconst ProfileDetailsSkeleton = styled.div`\n  width: 180px;\n  height: 36px;\n  border-radius: 12px;\n`\n\nconst FilterBarSkeletonWrapper = styled(SkeletonRowWrapper)`\n  justify-content: space-between;\n`\n\nconst FilterButtonSkeleton = styled.div`\n  width: 92px;\n  height: 44px;\n  border-radius: 12px;\n`\n\nconst SellButtonSkeleton = styled.div`\n  width: 80px;\n  height: 44px;\n  border-radius: 12px;\n`\n\nconst ProfileAssetCardSkeleton = styled.div`\n  width: 100%;\n  height: 330px;\n  border-radius: 20px;\n`\n\nconst ProfileAssetCardDisplaySectionSkeleton = () => {\n  return (\n    <Box width=\"full\" className={assetList}>\n      {Array.from(Array(DEFAULT_WALLET_ASSET_QUERY_AMOUNT), (_, index) => (\n        <ProfileAssetCardSkeleton key={index} className={loadingAsset} />\n      ))}\n    </Box>\n  )\n}\n\nexport const ProfileBodyLoadingSkeleton = () => {\n  return (\n    <SkeletonBodyWrapper>\n      <AccountDetailsSkeletonWrapper>\n        <ProfileDetailsSkeleton className={loadingAsset} />\n      </AccountDetailsSkeletonWrapper>\n      <FilterBarSkeletonWrapper>\n        <FilterButtonSkeleton className={loadingAsset} />\n        <SellButtonSkeleton className={loadingAsset} />\n      </FilterBarSkeletonWrapper>\n      <ProfileAssetCardDisplaySectionSkeleton />\n    </SkeletonBodyWrapper>\n  )\n}\n\nexport const ProfilePageLoadingSkeleton = () => {\n  return (\n    <SkeletonPageWrapper>\n      <ProfileBodyLoadingSkeleton />\n    </SkeletonPageWrapper>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { useTrace } from '@uniswap/analytics'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { NftCard, NftCardDisplayProps } from 'nft/components/card'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useBag, useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useMemo } from 'react'\n\ninterface ViewMyNftsAssetProps {\n  asset: WalletAsset\n  mediaShouldBePlaying: boolean\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n  hideDetails: boolean\n}\n\nexport const ViewMyNftsAsset = ({\n  asset,\n  mediaShouldBePlaying,\n  setCurrentTokenPlayingMedia,\n  hideDetails,\n}: ViewMyNftsAssetProps) => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const selectSellAsset = useSellAsset((state) => state.selectSellAsset)\n  const removeSellAsset = useSellAsset((state) => state.removeSellAsset)\n  const cartExpanded = useBag((state) => state.bagExpanded)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const isMobile = useIsMobile()\n\n  const isSelected = useMemo(() => {\n    return sellAssets.some(\n      (item) => item.tokenId === asset.tokenId && item.asset_contract.address === asset.asset_contract.address\n    )\n  }, [asset, sellAssets])\n\n  const trace = useTrace()\n  const onCardClick = () => handleSelect(isSelected)\n\n  const handleSelect = (removeAsset: boolean) => {\n    if (removeAsset) {\n      removeSellAsset(asset)\n    } else {\n      selectSellAsset(asset)\n      sendAnalyticsEvent(NFTEventName.NFT_SELL_ITEM_ADDED, {\n        collection_address: asset.asset_contract.address,\n        token_id: asset.tokenId,\n        ...trace,\n      })\n    }\n    if (\n      !cartExpanded &&\n      !sellAssets.find(\n        (x) => x.tokenId === asset.tokenId && x.asset_contract.address === asset.asset_contract.address\n      ) &&\n      !isMobile\n    )\n      toggleCart()\n  }\n\n  const isDisabled = asset.susFlag\n\n  const display: NftCardDisplayProps = useMemo(() => {\n    return {\n      primaryInfo: !!asset.asset_contract.name && asset.asset_contract.name,\n      primaryInfoIcon: asset.collectionIsVerified && <VerifiedIcon height=\"16px\" width=\"16px\" />,\n      secondaryInfo: asset.name || asset.tokenId ? asset.name ?? `#${asset.tokenId}` : null,\n      selectedInfo: <Trans>Remove from bag</Trans>,\n      notSelectedInfo: <Trans>List for sale</Trans>,\n      disabledInfo: <Trans>Unavailable for listing</Trans>,\n    }\n  }, [asset.asset_contract.name, asset.collectionIsVerified, asset.name, asset.tokenId])\n\n  return (\n    <NftCard\n      asset={asset}\n      display={display}\n      isSelected={isSelected}\n      isDisabled={Boolean(isDisabled)}\n      selectAsset={() => handleSelect(false)}\n      unselectAsset={() => handleSelect(true)}\n      onClick={onCardClick}\n      mediaShouldBePlaying={mediaShouldBePlaying}\n      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n      testId=\"nft-profile-asset\"\n      doNotLinkToDetails={hideDetails}\n    />\n  )\n}\n","import { useNftBalance } from 'graphql/data/nft/NftBalance'\nimport { AnimatedBox, Box } from 'nft/components/Box'\nimport { LoadingAssets } from 'nft/components/collection/CollectionAssetLoading'\nimport { assetList } from 'nft/components/collection/CollectionNfts.css'\nimport { FilterButton } from 'nft/components/collection/FilterButton'\nimport { ClearAllButton } from 'nft/components/collection/shared'\nimport { Column, Row } from 'nft/components/Flex'\nimport { CrossIcon } from 'nft/components/icons'\nimport { FilterSidebar } from 'nft/components/profile/view/FilterSidebar'\nimport { subhead } from 'nft/css/common.css'\nimport {\n  useBag,\n  useFiltersExpanded,\n  useIsMobile,\n  useSellAsset,\n  useWalletBalance,\n  useWalletCollections,\n} from 'nft/hooks'\nimport { ScreenBreakpointsPaddings } from 'nft/pages/collection/index.css'\nimport { OSCollectionsFetcher } from 'nft/queries'\nimport { WalletCollection } from 'nft/types'\nimport { Dispatch, SetStateAction, Suspense, useCallback, useEffect, useMemo, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useInfiniteQuery } from 'react-query'\nimport { easings, useSpring } from 'react-spring'\nimport styled from 'styled-components/macro'\nimport { shallow } from 'zustand/shallow'\n\nimport { EmptyWalletModule } from './EmptyWalletContent'\nimport * as styles from './ProfilePage.css'\nimport { ProfileBodyLoadingSkeleton } from './ProfilePageLoadingSkeleton'\nimport { ViewMyNftsAsset } from './ViewMyNftsAsset'\n\nconst ProfilePageColumn = styled(Column)`\n  ${ScreenBreakpointsPaddings}\n`\n\nconst ProfileHeader = styled.div`\n  font-size: 28px;\n  font-weight: 500;\n  line-height: 38px;\n  padding-bottom: 16px;\n  margin-bottom: 8px;\n  border-bottom: 1px solid ${({ theme }) => theme.backgroundOutline};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n    margin-bottom: 0px;\n  }\n`\n\nconst EmptyStateContainer = styled.div`\n  margin-top: 164px;\n`\n\nexport const DEFAULT_WALLET_ASSET_QUERY_AMOUNT = 25\nexport const WALLET_COLLECTIONS_PAGINATION_LIMIT = 300\nconst FILTER_SIDEBAR_WIDTH = 300\nconst PADDING = 16\n\nexport const ProfilePage = () => {\n  const { address } = useWalletBalance()\n  const walletCollections = useWalletCollections((state) => state.walletCollections)\n  const setWalletCollections = useWalletCollections((state) => state.setWalletCollections)\n  const { resetSellAssets } = useSellAsset(\n    ({ reset }) => ({\n      resetSellAssets: reset,\n    }),\n    shallow\n  )\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const toggleBag = useBag((state) => state.toggleBag)\n  const [isFiltersExpanded, setFiltersExpanded] = useFiltersExpanded()\n  const isMobile = useIsMobile()\n\n  const getOwnerCollections = async ({ pageParam = 0 }) => {\n    const res = await OSCollectionsFetcher({\n      params: {\n        asset_owner: address,\n        offset: `${pageParam * WALLET_COLLECTIONS_PAGINATION_LIMIT}`,\n        limit: `${WALLET_COLLECTIONS_PAGINATION_LIMIT}`,\n      },\n    })\n    return {\n      data: res,\n      nextPage: pageParam + 1,\n    }\n  }\n\n  const {\n    data: ownerCollectionsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isSuccess,\n  } = useInfiniteQuery(['ownerCollections', { address }], getOwnerCollections, {\n    getNextPageParam: (lastGroup) => (lastGroup.data.length === 0 ? undefined : lastGroup.nextPage),\n    refetchInterval: 15000,\n    refetchIntervalInBackground: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n  })\n\n  const ownerCollections = useMemo(\n    () => (isSuccess ? ownerCollectionsData?.pages.map((page) => page.data).flat() : null),\n    [isSuccess, ownerCollectionsData]\n  )\n\n  useEffect(() => {\n    ownerCollections && setWalletCollections(ownerCollections)\n  }, [ownerCollections, setWalletCollections])\n\n  return (\n    <ProfilePageColumn width=\"full\" paddingTop={{ sm: `${PADDING}`, md: '40' }}>\n      <>\n        <ProfileHeader>My NFTs</ProfileHeader>\n        <Row alignItems=\"flex-start\" position=\"relative\">\n          <FilterSidebar\n            fetchNextPage={fetchNextPage}\n            hasNextPage={hasNextPage}\n            isFetchingNextPage={isFetchingNextPage}\n            walletCollections={walletCollections}\n          />\n          {(!isMobile || !isFiltersExpanded) && (\n            <Suspense fallback={<ProfileBodyLoadingSkeleton />}>\n              <ProfilePageNfts\n                walletCollections={walletCollections}\n                isFiltersExpanded={isFiltersExpanded}\n                setFiltersExpanded={setFiltersExpanded}\n              />\n            </Suspense>\n          )}\n        </Row>\n      </>\n      {sellAssets.length > 0 && (\n        <Row\n          display={{ sm: 'flex', md: 'none' }}\n          position=\"fixed\"\n          left=\"16\"\n          height=\"56\"\n          borderRadius=\"12\"\n          paddingX=\"16\"\n          paddingY=\"12\"\n          background=\"backgroundSurface\"\n          borderStyle=\"solid\"\n          borderColor=\"backgroundOutline\"\n          borderWidth=\"1px\"\n          style={{ bottom: '68px', width: 'calc(100% - 32px)', lineHeight: '24px' }}\n          className={subhead}\n        >\n          {sellAssets.length} NFT{sellAssets.length === 1 ? '' : 's'}\n          <Box\n            fontWeight=\"semibold\"\n            fontSize=\"14\"\n            cursor=\"pointer\"\n            color=\"textSecondary\"\n            marginRight=\"20\"\n            marginLeft=\"auto\"\n            onClick={resetSellAssets}\n            lineHeight=\"16\"\n          >\n            Clear\n          </Box>\n          <Box\n            color=\"white\"\n            marginRight=\"0\"\n            fontWeight=\"medium\"\n            fontSize=\"14\"\n            cursor=\"pointer\"\n            backgroundColor=\"accentAction\"\n            onClick={toggleBag}\n            lineHeight=\"16\"\n            borderRadius=\"12\"\n            paddingY=\"8\"\n            paddingX=\"28\"\n          >\n            List for sale\n          </Box>\n        </Row>\n      )}\n    </ProfilePageColumn>\n  )\n}\n\nconst ProfilePageNfts = ({\n  walletCollections,\n  isFiltersExpanded,\n  setFiltersExpanded,\n}: {\n  walletCollections: WalletCollection[]\n  isFiltersExpanded: boolean\n  setFiltersExpanded: (filtersExpanded: boolean) => void\n}) => {\n  const { address } = useWalletBalance()\n  const setCollectionFilters = useWalletCollections((state) => state.setCollectionFilters)\n  const collectionFilters = useWalletCollections((state) => state.collectionFilters)\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\n  const isBagExpanded = useBag((state) => state.bagExpanded)\n  const [currentTokenPlayingMedia, setCurrentTokenPlayingMedia] = useState<string | undefined>()\n  const isMobile = useIsMobile()\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n\n  const {\n    walletAssets: ownerAssets,\n    loading,\n    hasNext,\n    loadMore,\n  } = useNftBalance(address, collectionFilters, [], DEFAULT_WALLET_ASSET_QUERY_AMOUNT)\n\n  const { gridX } = useSpring({\n    gridX: isFiltersExpanded ? FILTER_SIDEBAR_WIDTH : -PADDING,\n    config: {\n      duration: 250,\n      easing: easings.easeOutSine,\n    },\n  })\n\n  if (loading) return <ProfileBodyLoadingSkeleton />\n\n  return (\n    <Column width=\"full\">\n      {ownerAssets?.length === 0 ? (\n        <EmptyStateContainer>\n          <EmptyWalletModule />\n        </EmptyStateContainer>\n      ) : (\n        <AnimatedBox\n          flexShrink=\"0\"\n          position={isMobile && isBagExpanded ? 'fixed' : 'static'}\n          style={{\n            transform: gridX.to(\n              (x) => `translate(${Number(x) - (!isMobile && isFiltersExpanded ? FILTER_SIDEBAR_WIDTH : -PADDING)}px)`\n            ),\n          }}\n          paddingY=\"20\"\n        >\n          <Row gap=\"8\" flexWrap=\"nowrap\" justifyContent=\"space-between\">\n            <FilterButton\n              isMobile={isMobile}\n              isFiltersExpanded={isFiltersExpanded}\n              onClick={() => setFiltersExpanded(!isFiltersExpanded)}\n            />\n          </Row>\n          <Row>\n            <CollectionFiltersRow\n              collections={walletCollections}\n              collectionFilters={collectionFilters}\n              setCollectionFilters={setCollectionFilters}\n              clearCollectionFilters={clearCollectionFilters}\n            />\n          </Row>\n          <InfiniteScroll\n            next={loadMore}\n            hasMore={hasNext ?? false}\n            loader={\n              Boolean(hasNext && ownerAssets?.length) && <LoadingAssets count={DEFAULT_WALLET_ASSET_QUERY_AMOUNT} />\n            }\n            dataLength={ownerAssets?.length ?? 0}\n            className={ownerAssets?.length ? assetList : undefined}\n            style={{ overflow: 'unset' }}\n          >\n            {ownerAssets?.length\n              ? ownerAssets.map((asset, index) => (\n                  <div key={index}>\n                    <ViewMyNftsAsset\n                      asset={asset}\n                      mediaShouldBePlaying={asset.tokenId === currentTokenPlayingMedia}\n                      setCurrentTokenPlayingMedia={setCurrentTokenPlayingMedia}\n                      hideDetails={sellAssets.length > 0}\n                    />\n                  </div>\n                ))\n              : null}\n          </InfiniteScroll>\n        </AnimatedBox>\n      )}\n    </Column>\n  )\n}\n\nconst CollectionFiltersRow = ({\n  collections,\n  collectionFilters,\n  setCollectionFilters,\n  clearCollectionFilters,\n}: {\n  collections: WalletCollection[]\n  collectionFilters: Array<string>\n  setCollectionFilters: (address: string) => void\n  clearCollectionFilters: Dispatch<SetStateAction<void>>\n}) => {\n  const getCollection = (collectionAddress: string) => {\n    return collections?.find((collection) => collection.address === collectionAddress)\n  }\n  const handleClearAllClick = useCallback(() => clearCollectionFilters(), [clearCollectionFilters])\n  return (\n    <Row paddingY=\"18\" gap=\"8\" flexWrap=\"wrap\">\n      {Boolean(collectionFilters?.length) &&\n        collectionFilters.map((collectionAddress, index) => (\n          <CollectionFilterItem\n            collection={getCollection(collectionAddress)}\n            key={`CollectionFilterItem-${collectionAddress}-${index}`}\n            setCollectionFilters={setCollectionFilters}\n          />\n        ))}\n      {Boolean(collectionFilters?.length) && <ClearAllButton onClick={handleClearAllClick}>Clear all</ClearAllButton>}\n    </Row>\n  )\n}\n\nconst CollectionFilterItem = ({\n  collection,\n  setCollectionFilters,\n}: {\n  collection: WalletCollection | undefined\n  setCollectionFilters: (address: string) => void\n}) => {\n  if (!collection) return null\n  return (\n    <Row\n      justifyContent=\"center\"\n      paddingTop=\"6\"\n      paddingRight=\"6\"\n      paddingBottom=\"6\"\n      paddingLeft=\"12\"\n      borderRadius=\"8\"\n      background=\"backgroundOutline\"\n      fontSize=\"14\"\n    >\n      <Box as=\"img\" borderRadius=\"round\" width=\"20\" height=\"20\" src={collection.image} />\n      <Box marginLeft=\"6\" className={styles.collectionFilterBubbleText}>\n        {collection?.name}\n      </Box>\n      <Box\n        color=\"textSecondary\"\n        background=\"none\"\n        height=\"28\"\n        width=\"28\"\n        padding=\"0\"\n        as=\"button\"\n        border=\"none\"\n        cursor=\"pointer\"\n        onClick={() => setCollectionFilters(collection.address)}\n      >\n        <CrossIcon />\n      </Box>\n    </Row>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonPrimary } from 'components/Button'\nimport { useToggleWalletDrawer } from 'components/WalletDropdown'\nimport { XXXL_BAG_WIDTH } from 'nft/components/bag/Bag'\nimport { ListPage } from 'nft/components/profile/list/ListPage'\nimport { ProfilePage } from 'nft/components/profile/view/ProfilePage'\nimport { ProfilePageLoadingSkeleton } from 'nft/components/profile/view/ProfilePageLoadingSkeleton'\nimport { useBag, useProfilePageState, useSellAsset, useWalletCollections } from 'nft/hooks'\nimport { ProfilePageStateType } from 'nft/types'\nimport { Suspense, useEffect, useRef } from 'react'\nimport styled from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\n\nimport { LIST_PAGE_MARGIN, LIST_PAGE_MARGIN_MOBILE } from './shared'\n\nconst ProfilePageWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n  scrollbar-width: none;\n\n  @media screen and (min-width: ${BREAKPOINTS.lg}px) {\n    height: auto;\n  }\n`\n\nconst LoadedAccountPage = styled.div<{ cartExpanded: boolean; isListingNfts: boolean }>`\n  width: calc(\n    100% -\n      ${({ cartExpanded, isListingNfts }) =>\n        isListingNfts ? LIST_PAGE_MARGIN * 2 : cartExpanded ? XXXL_BAG_WIDTH : 0}px\n  );\n  margin: 0px ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN : 0)}px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: calc(100% - ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN_MOBILE * 2 : 0)}px);\n    margin: 0px ${({ isListingNfts }) => (isListingNfts ? LIST_PAGE_MARGIN_MOBILE : 0)}px;\n  }\n`\n\nconst Center = styled.div`\n  left: 50%;\n  top: 40%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: fixed;\n  white-space: nowrap;\n`\n\nconst ConnectWalletButton = styled(ButtonPrimary)`\n  width: min-content;\n  white-space: nowrap;\n  border-radius: 12px;\n  padding: 14px 18px;\n  border: none;\n`\n\nconst ProfileContent = () => {\n  const sellPageState = useProfilePageState((state) => state.state)\n  const setSellPageState = useProfilePageState((state) => state.setProfilePageState)\n  const resetSellAssets = useSellAsset((state) => state.reset)\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\n\n  const { account } = useWeb3React()\n  const accountRef = useRef(account)\n  const toggleWalletDrawer = useToggleWalletDrawer()\n\n  useEffect(() => {\n    if (accountRef.current !== account) {\n      accountRef.current = account\n      resetSellAssets()\n      setSellPageState(ProfilePageStateType.VIEWING)\n      clearCollectionFilters()\n    }\n  }, [account, resetSellAssets, setSellPageState, clearCollectionFilters])\n  const cartExpanded = useBag((state) => state.bagExpanded)\n  const isListingNfts = sellPageState === ProfilePageStateType.LISTING\n\n  return (\n    <Trace page={InterfacePageName.NFT_PROFILE_PAGE} shouldLogImpression>\n      <ProfilePageWrapper>\n        {account ? (\n          <LoadedAccountPage cartExpanded={cartExpanded} isListingNfts={isListingNfts}>\n            {!isListingNfts ? <ProfilePage /> : <ListPage />}\n          </LoadedAccountPage>\n        ) : (\n          <Center>\n            <ThemedText.HeadlineMedium lineHeight=\"36px\" color=\"textSecondary\" fontWeight=\"600\" marginBottom=\"24px\">\n              <Trans>No items to display</Trans>\n            </ThemedText.HeadlineMedium>\n            <ConnectWalletButton onClick={toggleWalletDrawer}>\n              <ThemedText.SubHeader color=\"white\" lineHeight=\"20px\">\n                <Trans>Connect Wallet</Trans>\n              </ThemedText.SubHeader>\n            </ConnectWalletButton>\n          </Center>\n        )}\n      </ProfilePageWrapper>\n    </Trace>\n  )\n}\n\nconst Profile = () => {\n  return (\n    <Suspense fallback={<ProfilePageLoadingSkeleton />}>\n      <ProfileContent />\n    </Suspense>\n  )\n}\n\nexport default Profile\n","export const LIST_PAGE_MARGIN = 40\nexport const LIST_PAGE_MARGIN_MOBILE = 16\n"],"sourceRoot":""}